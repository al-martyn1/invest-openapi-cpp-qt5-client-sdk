/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef QTkfInvestOa_QTkfInvestOaOperationsApi_H
#define QTkfInvestOa_QTkfInvestOaOperationsApi_H

#include "QTkfInvestOaHttpRequest.h"

#include "QTkfInvestOaError.h"
#include "QTkfInvestOaOperationsResponse.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class QTkfInvestOaOperationsApi : public QObject {
    Q_OBJECT

public:
    QTkfInvestOaOperationsApi(const QString &scheme = "https", const QString &host = "api-invest.tinkoff.ru", int port = 0, const QString &basePath = "/openapi", const int timeOut = 0);
    ~QTkfInvestOaOperationsApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void operationsGet(const QDateTime &from, const QDateTime &to, const QString &figi, const QString &broker_account_id);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void operationsGetCallback(QTkfInvestOaHttpRequestWorker *worker);

signals:

    void operationsGetSignal(QTkfInvestOaOperationsResponse summary);

    void operationsGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaOperationsResponse summary);

    void operationsGetSignalE(QTkfInvestOaOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void operationsGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
