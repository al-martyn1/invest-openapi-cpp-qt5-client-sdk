/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MarketInstrument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace OpenAPI {

MarketInstrument::MarketInstrument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MarketInstrument::MarketInstrument() {
    this->initializeModel();
}

MarketInstrument::~MarketInstrument() {}

void MarketInstrument::initializeModel() {

    m_figi_isSet = false;
    m_figi_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_min_price_increment_isSet = false;
    m_min_price_increment_isValid = false;

    m_lot_isSet = false;
    m_lot_isValid = false;

    m_min_quantity_isSet = false;
    m_min_quantity_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void MarketInstrument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MarketInstrument::fromJsonObject(QJsonObject json) {

    m_figi_isValid = ::OpenAPI::fromJsonValue(figi, json[QString("figi")]);
    m_figi_isSet = !json[QString("figi")].isNull() && m_figi_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_min_price_increment_isValid = ::OpenAPI::fromJsonValue(min_price_increment, json[QString("minPriceIncrement")]);
    m_min_price_increment_isSet = !json[QString("minPriceIncrement")].isNull() && m_min_price_increment_isValid;

    m_lot_isValid = ::OpenAPI::fromJsonValue(lot, json[QString("lot")]);
    m_lot_isSet = !json[QString("lot")].isNull() && m_lot_isValid;

    m_min_quantity_isValid = ::OpenAPI::fromJsonValue(min_quantity, json[QString("minQuantity")]);
    m_min_quantity_isSet = !json[QString("minQuantity")].isNull() && m_min_quantity_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString MarketInstrument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MarketInstrument::asJsonObject() const {
    QJsonObject obj;
    if (m_figi_isSet) {
        obj.insert(QString("figi"), ::OpenAPI::toJsonValue(figi));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(ticker));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(isin));
    }
    if (m_min_price_increment_isSet) {
        obj.insert(QString("minPriceIncrement"), ::OpenAPI::toJsonValue(min_price_increment));
    }
    if (m_lot_isSet) {
        obj.insert(QString("lot"), ::OpenAPI::toJsonValue(lot));
    }
    if (m_min_quantity_isSet) {
        obj.insert(QString("minQuantity"), ::OpenAPI::toJsonValue(min_quantity));
    }
    if (currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}

QString MarketInstrument::getFigi() const {
    return figi;
}
void MarketInstrument::setFigi(const QString &figi) {
    this->figi = figi;
    this->m_figi_isSet = true;
}

bool MarketInstrument::is_figi_Set() const{
    return m_figi_isSet;
}

bool MarketInstrument::is_figi_Valid() const{
    return m_figi_isValid;
}

QString MarketInstrument::getTicker() const {
    return ticker;
}
void MarketInstrument::setTicker(const QString &ticker) {
    this->ticker = ticker;
    this->m_ticker_isSet = true;
}

bool MarketInstrument::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool MarketInstrument::is_ticker_Valid() const{
    return m_ticker_isValid;
}

QString MarketInstrument::getIsin() const {
    return isin;
}
void MarketInstrument::setIsin(const QString &isin) {
    this->isin = isin;
    this->m_isin_isSet = true;
}

bool MarketInstrument::is_isin_Set() const{
    return m_isin_isSet;
}

bool MarketInstrument::is_isin_Valid() const{
    return m_isin_isValid;
}

double MarketInstrument::getMinPriceIncrement() const {
    return min_price_increment;
}
void MarketInstrument::setMinPriceIncrement(const double &min_price_increment) {
    this->min_price_increment = min_price_increment;
    this->m_min_price_increment_isSet = true;
}

bool MarketInstrument::is_min_price_increment_Set() const{
    return m_min_price_increment_isSet;
}

bool MarketInstrument::is_min_price_increment_Valid() const{
    return m_min_price_increment_isValid;
}

qint32 MarketInstrument::getLot() const {
    return lot;
}
void MarketInstrument::setLot(const qint32 &lot) {
    this->lot = lot;
    this->m_lot_isSet = true;
}

bool MarketInstrument::is_lot_Set() const{
    return m_lot_isSet;
}

bool MarketInstrument::is_lot_Valid() const{
    return m_lot_isValid;
}

qint32 MarketInstrument::getMinQuantity() const {
    return min_quantity;
}
void MarketInstrument::setMinQuantity(const qint32 &min_quantity) {
    this->min_quantity = min_quantity;
    this->m_min_quantity_isSet = true;
}

bool MarketInstrument::is_min_quantity_Set() const{
    return m_min_quantity_isSet;
}

bool MarketInstrument::is_min_quantity_Valid() const{
    return m_min_quantity_isValid;
}

Currency MarketInstrument::getCurrency() const {
    return currency;
}
void MarketInstrument::setCurrency(const Currency &currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

bool MarketInstrument::is_currency_Set() const{
    return m_currency_isSet;
}

bool MarketInstrument::is_currency_Valid() const{
    return m_currency_isValid;
}

QString MarketInstrument::getName() const {
    return name;
}
void MarketInstrument::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool MarketInstrument::is_name_Set() const{
    return m_name_isSet;
}

bool MarketInstrument::is_name_Valid() const{
    return m_name_isValid;
}

InstrumentType MarketInstrument::getType() const {
    return type;
}
void MarketInstrument::setType(const InstrumentType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool MarketInstrument::is_type_Set() const{
    return m_type_isSet;
}

bool MarketInstrument::is_type_Valid() const{
    return m_type_isValid;
}

bool MarketInstrument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_price_increment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MarketInstrument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_figi_isValid && m_ticker_isValid && m_lot_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
