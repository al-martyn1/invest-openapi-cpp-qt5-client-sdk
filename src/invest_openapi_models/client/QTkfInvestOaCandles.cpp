/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaCandles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "QTkfInvestOaHelpers.h"

namespace OpenAPI {

QTkfInvestOaCandles::QTkfInvestOaCandles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

QTkfInvestOaCandles::QTkfInvestOaCandles() {
    this->initializeModel();
}

QTkfInvestOaCandles::~QTkfInvestOaCandles() {}

void QTkfInvestOaCandles::initializeModel() {

    m_figi_isSet = false;
    m_figi_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_candles_isSet = false;
    m_candles_isValid = false;
}

void QTkfInvestOaCandles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void QTkfInvestOaCandles::fromJsonObject(QJsonObject json) {

    m_figi_isValid = ::OpenAPI::fromJsonValue(figi, json[QString("figi")]);
    m_figi_isSet = !json[QString("figi")].isNull() && m_figi_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_candles_isValid = ::OpenAPI::fromJsonValue(candles, json[QString("candles")]);
    m_candles_isSet = !json[QString("candles")].isNull() && m_candles_isValid;
}

QString QTkfInvestOaCandles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject QTkfInvestOaCandles::asJsonObject() const {
    QJsonObject obj;
    if (m_figi_isSet) {
        obj.insert(QString("figi"), ::OpenAPI::toJsonValue(figi));
    }
    if (interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(interval));
    }
    if (candles.size() > 0) {
        obj.insert(QString("candles"), ::OpenAPI::toJsonValue(candles));
    }
    return obj;
}

QString QTkfInvestOaCandles::getFigi() const {
    return figi;
}
void QTkfInvestOaCandles::setFigi(const QString &figi) {
    this->figi = figi;
    this->m_figi_isSet = true;
}

bool QTkfInvestOaCandles::is_figi_Set() const{
    return m_figi_isSet;
}

bool QTkfInvestOaCandles::is_figi_Valid() const{
    return m_figi_isValid;
}

QTkfInvestOaCandleResolution QTkfInvestOaCandles::getInterval() const {
    return interval;
}
void QTkfInvestOaCandles::setInterval(const QTkfInvestOaCandleResolution &interval) {
    this->interval = interval;
    this->m_interval_isSet = true;
}

bool QTkfInvestOaCandles::is_interval_Set() const{
    return m_interval_isSet;
}

bool QTkfInvestOaCandles::is_interval_Valid() const{
    return m_interval_isValid;
}

QList<QTkfInvestOaCandle> QTkfInvestOaCandles::getCandles() const {
    return candles;
}
void QTkfInvestOaCandles::setCandles(const QList<QTkfInvestOaCandle> &candles) {
    this->candles = candles;
    this->m_candles_isSet = true;
}

bool QTkfInvestOaCandles::is_candles_Set() const{
    return m_candles_isSet;
}

bool QTkfInvestOaCandles::is_candles_Valid() const{
    return m_candles_isValid;
}

bool QTkfInvestOaCandles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (candles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool QTkfInvestOaCandles::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_figi_isValid && m_interval_isValid && m_candles_isValid && true;
}

} // namespace OpenAPI
