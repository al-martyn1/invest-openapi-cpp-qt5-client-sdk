/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaOperationTypeWithCommission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "QTkfInvestOaHelpers.h"

namespace OpenAPI {

QTkfInvestOaOperationTypeWithCommission::QTkfInvestOaOperationTypeWithCommission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

QTkfInvestOaOperationTypeWithCommission::QTkfInvestOaOperationTypeWithCommission() {
    this->initializeModel();
}

QTkfInvestOaOperationTypeWithCommission::~QTkfInvestOaOperationTypeWithCommission() {}

void QTkfInvestOaOperationTypeWithCommission::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eQTkfInvestOaOperationTypeWithCommission::INVALID_VALUE_OPENAPI_GENERATED;
}

void QTkfInvestOaOperationTypeWithCommission::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Buy", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::BUY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BuyCard", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::BUYCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sell", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::SELL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BrokerCommission", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::BROKERCOMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExchangeCommission", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::EXCHANGECOMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceCommission", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::SERVICECOMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MarginCommission", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::MARGINCOMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherCommission", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::OTHERCOMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PayIn", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::PAYIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PayOut", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::PAYOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tax", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::TAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TaxLucre", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::TAXLUCRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TaxDividend", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::TAXDIVIDEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TaxCoupon", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::TAXCOUPON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TaxBack", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::TAXBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Repayment", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::REPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PartRepayment", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::PARTREPAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Coupon", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::COUPON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dividend", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::DIVIDEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecurityIn", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::SECURITYIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecurityOut", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaOperationTypeWithCommission::SECURITYOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void QTkfInvestOaOperationTypeWithCommission::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString QTkfInvestOaOperationTypeWithCommission::asJson() const {
    
    QString val;
    switch (m_value){
        case eQTkfInvestOaOperationTypeWithCommission::BUY:
            val = "Buy";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::BUYCARD:
            val = "BuyCard";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::SELL:
            val = "Sell";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::BROKERCOMMISSION:
            val = "BrokerCommission";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::EXCHANGECOMMISSION:
            val = "ExchangeCommission";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::SERVICECOMMISSION:
            val = "ServiceCommission";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::MARGINCOMMISSION:
            val = "MarginCommission";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::OTHERCOMMISSION:
            val = "OtherCommission";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::PAYIN:
            val = "PayIn";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::PAYOUT:
            val = "PayOut";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::TAX:
            val = "Tax";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::TAXLUCRE:
            val = "TaxLucre";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::TAXDIVIDEND:
            val = "TaxDividend";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::TAXCOUPON:
            val = "TaxCoupon";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::TAXBACK:
            val = "TaxBack";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::REPAYMENT:
            val = "Repayment";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::PARTREPAYMENT:
            val = "PartRepayment";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::COUPON:
            val = "Coupon";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::DIVIDEND:
            val = "Dividend";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::SECURITYIN:
            val = "SecurityIn";
            break;
        case eQTkfInvestOaOperationTypeWithCommission::SECURITYOUT:
            val = "SecurityOut";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue QTkfInvestOaOperationTypeWithCommission::asJsonValue() const {
    
    return QJsonValue(asJson());
}


QTkfInvestOaOperationTypeWithCommission::eQTkfInvestOaOperationTypeWithCommission QTkfInvestOaOperationTypeWithCommission::getValue() const {
    return m_value;
}

void QTkfInvestOaOperationTypeWithCommission::setValue(const QTkfInvestOaOperationTypeWithCommission::eQTkfInvestOaOperationTypeWithCommission& value){
    m_value = value;
    m_value_isSet = true;
}
bool QTkfInvestOaOperationTypeWithCommission::isSet() const {
    
    return m_value_isSet;
}

bool QTkfInvestOaOperationTypeWithCommission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
