/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaPlacedMarketOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "QTkfInvestOaHelpers.h"

namespace OpenAPI {

QTkfInvestOaPlacedMarketOrder::QTkfInvestOaPlacedMarketOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

QTkfInvestOaPlacedMarketOrder::QTkfInvestOaPlacedMarketOrder() {
    this->initializeModel();
}

QTkfInvestOaPlacedMarketOrder::~QTkfInvestOaPlacedMarketOrder() {}

void QTkfInvestOaPlacedMarketOrder::initializeModel() {

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_reject_reason_isSet = false;
    m_reject_reason_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_requested_lots_isSet = false;
    m_requested_lots_isValid = false;

    m_executed_lots_isSet = false;
    m_executed_lots_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;
}

void QTkfInvestOaPlacedMarketOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void QTkfInvestOaPlacedMarketOrder::fromJsonObject(QJsonObject json) {

    m_order_id_isValid = ::OpenAPI::fromJsonValue(order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_reject_reason_isValid = ::OpenAPI::fromJsonValue(reject_reason, json[QString("rejectReason")]);
    m_reject_reason_isSet = !json[QString("rejectReason")].isNull() && m_reject_reason_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_requested_lots_isValid = ::OpenAPI::fromJsonValue(requested_lots, json[QString("requestedLots")]);
    m_requested_lots_isSet = !json[QString("requestedLots")].isNull() && m_requested_lots_isValid;

    m_executed_lots_isValid = ::OpenAPI::fromJsonValue(executed_lots, json[QString("executedLots")]);
    m_executed_lots_isSet = !json[QString("executedLots")].isNull() && m_executed_lots_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;
}

QString QTkfInvestOaPlacedMarketOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject QTkfInvestOaPlacedMarketOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(order_id));
    }
    if (operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(operation));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_reject_reason_isSet) {
        obj.insert(QString("rejectReason"), ::OpenAPI::toJsonValue(reject_reason));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    if (m_requested_lots_isSet) {
        obj.insert(QString("requestedLots"), ::OpenAPI::toJsonValue(requested_lots));
    }
    if (m_executed_lots_isSet) {
        obj.insert(QString("executedLots"), ::OpenAPI::toJsonValue(executed_lots));
    }
    if (commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(commission));
    }
    return obj;
}

QString QTkfInvestOaPlacedMarketOrder::getOrderId() const {
    return order_id;
}
void QTkfInvestOaPlacedMarketOrder::setOrderId(const QString &order_id) {
    this->order_id = order_id;
    this->m_order_id_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QTkfInvestOaOperationType QTkfInvestOaPlacedMarketOrder::getOperation() const {
    return operation;
}
void QTkfInvestOaPlacedMarketOrder::setOperation(const QTkfInvestOaOperationType &operation) {
    this->operation = operation;
    this->m_operation_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_operation_Set() const{
    return m_operation_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_operation_Valid() const{
    return m_operation_isValid;
}

QTkfInvestOaOrderStatus QTkfInvestOaPlacedMarketOrder::getStatus() const {
    return status;
}
void QTkfInvestOaPlacedMarketOrder::setStatus(const QTkfInvestOaOrderStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_status_Set() const{
    return m_status_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString QTkfInvestOaPlacedMarketOrder::getRejectReason() const {
    return reject_reason;
}
void QTkfInvestOaPlacedMarketOrder::setRejectReason(const QString &reject_reason) {
    this->reject_reason = reject_reason;
    this->m_reject_reason_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_reject_reason_Set() const{
    return m_reject_reason_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_reject_reason_Valid() const{
    return m_reject_reason_isValid;
}

QString QTkfInvestOaPlacedMarketOrder::getMessage() const {
    return message;
}
void QTkfInvestOaPlacedMarketOrder::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_message_Set() const{
    return m_message_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_message_Valid() const{
    return m_message_isValid;
}

qint32 QTkfInvestOaPlacedMarketOrder::getRequestedLots() const {
    return requested_lots;
}
void QTkfInvestOaPlacedMarketOrder::setRequestedLots(const qint32 &requested_lots) {
    this->requested_lots = requested_lots;
    this->m_requested_lots_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_requested_lots_Set() const{
    return m_requested_lots_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_requested_lots_Valid() const{
    return m_requested_lots_isValid;
}

qint32 QTkfInvestOaPlacedMarketOrder::getExecutedLots() const {
    return executed_lots;
}
void QTkfInvestOaPlacedMarketOrder::setExecutedLots(const qint32 &executed_lots) {
    this->executed_lots = executed_lots;
    this->m_executed_lots_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_executed_lots_Set() const{
    return m_executed_lots_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_executed_lots_Valid() const{
    return m_executed_lots_isValid;
}

QTkfInvestOaMoneyAmount QTkfInvestOaPlacedMarketOrder::getCommission() const {
    return commission;
}
void QTkfInvestOaPlacedMarketOrder::setCommission(const QTkfInvestOaMoneyAmount &commission) {
    this->commission = commission;
    this->m_commission_isSet = true;
}

bool QTkfInvestOaPlacedMarketOrder::is_commission_Set() const{
    return m_commission_isSet;
}

bool QTkfInvestOaPlacedMarketOrder::is_commission_Valid() const{
    return m_commission_isValid;
}

bool QTkfInvestOaPlacedMarketOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_lots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executed_lots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (commission.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool QTkfInvestOaPlacedMarketOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_id_isValid && m_operation_isValid && m_status_isValid && m_requested_lots_isValid && m_executed_lots_isValid && true;
}

} // namespace OpenAPI
