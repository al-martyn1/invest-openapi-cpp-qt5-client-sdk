/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaOrderbook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "QTkfInvestOaHelpers.h"

namespace OpenAPI {

QTkfInvestOaOrderbook::QTkfInvestOaOrderbook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

QTkfInvestOaOrderbook::QTkfInvestOaOrderbook() {
    this->initializeModel();
}

QTkfInvestOaOrderbook::~QTkfInvestOaOrderbook() {}

void QTkfInvestOaOrderbook::initializeModel() {

    m_figi_isSet = false;
    m_figi_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_bids_isSet = false;
    m_bids_isValid = false;

    m_asks_isSet = false;
    m_asks_isValid = false;

    m_trade_status_isSet = false;
    m_trade_status_isValid = false;

    m_min_price_increment_isSet = false;
    m_min_price_increment_isValid = false;

    m_face_value_isSet = false;
    m_face_value_isValid = false;

    m_last_price_isSet = false;
    m_last_price_isValid = false;

    m_close_price_isSet = false;
    m_close_price_isValid = false;

    m_limit_up_isSet = false;
    m_limit_up_isValid = false;

    m_limit_down_isSet = false;
    m_limit_down_isValid = false;
}

void QTkfInvestOaOrderbook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void QTkfInvestOaOrderbook::fromJsonObject(QJsonObject json) {

    m_figi_isValid = ::OpenAPI::fromJsonValue(figi, json[QString("figi")]);
    m_figi_isSet = !json[QString("figi")].isNull() && m_figi_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_bids_isValid = ::OpenAPI::fromJsonValue(bids, json[QString("bids")]);
    m_bids_isSet = !json[QString("bids")].isNull() && m_bids_isValid;

    m_asks_isValid = ::OpenAPI::fromJsonValue(asks, json[QString("asks")]);
    m_asks_isSet = !json[QString("asks")].isNull() && m_asks_isValid;

    m_trade_status_isValid = ::OpenAPI::fromJsonValue(trade_status, json[QString("tradeStatus")]);
    m_trade_status_isSet = !json[QString("tradeStatus")].isNull() && m_trade_status_isValid;

    m_min_price_increment_isValid = ::OpenAPI::fromJsonValue(min_price_increment, json[QString("minPriceIncrement")]);
    m_min_price_increment_isSet = !json[QString("minPriceIncrement")].isNull() && m_min_price_increment_isValid;

    m_face_value_isValid = ::OpenAPI::fromJsonValue(face_value, json[QString("faceValue")]);
    m_face_value_isSet = !json[QString("faceValue")].isNull() && m_face_value_isValid;

    m_last_price_isValid = ::OpenAPI::fromJsonValue(last_price, json[QString("lastPrice")]);
    m_last_price_isSet = !json[QString("lastPrice")].isNull() && m_last_price_isValid;

    m_close_price_isValid = ::OpenAPI::fromJsonValue(close_price, json[QString("closePrice")]);
    m_close_price_isSet = !json[QString("closePrice")].isNull() && m_close_price_isValid;

    m_limit_up_isValid = ::OpenAPI::fromJsonValue(limit_up, json[QString("limitUp")]);
    m_limit_up_isSet = !json[QString("limitUp")].isNull() && m_limit_up_isValid;

    m_limit_down_isValid = ::OpenAPI::fromJsonValue(limit_down, json[QString("limitDown")]);
    m_limit_down_isSet = !json[QString("limitDown")].isNull() && m_limit_down_isValid;
}

QString QTkfInvestOaOrderbook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject QTkfInvestOaOrderbook::asJsonObject() const {
    QJsonObject obj;
    if (m_figi_isSet) {
        obj.insert(QString("figi"), ::OpenAPI::toJsonValue(figi));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(depth));
    }
    if (bids.size() > 0) {
        obj.insert(QString("bids"), ::OpenAPI::toJsonValue(bids));
    }
    if (asks.size() > 0) {
        obj.insert(QString("asks"), ::OpenAPI::toJsonValue(asks));
    }
    if (trade_status.isSet()) {
        obj.insert(QString("tradeStatus"), ::OpenAPI::toJsonValue(trade_status));
    }
    if (m_min_price_increment_isSet) {
        obj.insert(QString("minPriceIncrement"), ::OpenAPI::toJsonValue(min_price_increment));
    }
    if (m_face_value_isSet) {
        obj.insert(QString("faceValue"), ::OpenAPI::toJsonValue(face_value));
    }
    if (m_last_price_isSet) {
        obj.insert(QString("lastPrice"), ::OpenAPI::toJsonValue(last_price));
    }
    if (m_close_price_isSet) {
        obj.insert(QString("closePrice"), ::OpenAPI::toJsonValue(close_price));
    }
    if (m_limit_up_isSet) {
        obj.insert(QString("limitUp"), ::OpenAPI::toJsonValue(limit_up));
    }
    if (m_limit_down_isSet) {
        obj.insert(QString("limitDown"), ::OpenAPI::toJsonValue(limit_down));
    }
    return obj;
}

QString QTkfInvestOaOrderbook::getFigi() const {
    return figi;
}
void QTkfInvestOaOrderbook::setFigi(const QString &figi) {
    this->figi = figi;
    this->m_figi_isSet = true;
}

bool QTkfInvestOaOrderbook::is_figi_Set() const{
    return m_figi_isSet;
}

bool QTkfInvestOaOrderbook::is_figi_Valid() const{
    return m_figi_isValid;
}

qint32 QTkfInvestOaOrderbook::getDepth() const {
    return depth;
}
void QTkfInvestOaOrderbook::setDepth(const qint32 &depth) {
    this->depth = depth;
    this->m_depth_isSet = true;
}

bool QTkfInvestOaOrderbook::is_depth_Set() const{
    return m_depth_isSet;
}

bool QTkfInvestOaOrderbook::is_depth_Valid() const{
    return m_depth_isValid;
}

QList<QTkfInvestOaOrderResponse> QTkfInvestOaOrderbook::getBids() const {
    return bids;
}
void QTkfInvestOaOrderbook::setBids(const QList<QTkfInvestOaOrderResponse> &bids) {
    this->bids = bids;
    this->m_bids_isSet = true;
}

bool QTkfInvestOaOrderbook::is_bids_Set() const{
    return m_bids_isSet;
}

bool QTkfInvestOaOrderbook::is_bids_Valid() const{
    return m_bids_isValid;
}

QList<QTkfInvestOaOrderResponse> QTkfInvestOaOrderbook::getAsks() const {
    return asks;
}
void QTkfInvestOaOrderbook::setAsks(const QList<QTkfInvestOaOrderResponse> &asks) {
    this->asks = asks;
    this->m_asks_isSet = true;
}

bool QTkfInvestOaOrderbook::is_asks_Set() const{
    return m_asks_isSet;
}

bool QTkfInvestOaOrderbook::is_asks_Valid() const{
    return m_asks_isValid;
}

QTkfInvestOaTradeStatus QTkfInvestOaOrderbook::getTradeStatus() const {
    return trade_status;
}
void QTkfInvestOaOrderbook::setTradeStatus(const QTkfInvestOaTradeStatus &trade_status) {
    this->trade_status = trade_status;
    this->m_trade_status_isSet = true;
}

bool QTkfInvestOaOrderbook::is_trade_status_Set() const{
    return m_trade_status_isSet;
}

bool QTkfInvestOaOrderbook::is_trade_status_Valid() const{
    return m_trade_status_isValid;
}

double QTkfInvestOaOrderbook::getMinPriceIncrement() const {
    return min_price_increment;
}
void QTkfInvestOaOrderbook::setMinPriceIncrement(const double &min_price_increment) {
    this->min_price_increment = min_price_increment;
    this->m_min_price_increment_isSet = true;
}

bool QTkfInvestOaOrderbook::is_min_price_increment_Set() const{
    return m_min_price_increment_isSet;
}

bool QTkfInvestOaOrderbook::is_min_price_increment_Valid() const{
    return m_min_price_increment_isValid;
}

double QTkfInvestOaOrderbook::getFaceValue() const {
    return face_value;
}
void QTkfInvestOaOrderbook::setFaceValue(const double &face_value) {
    this->face_value = face_value;
    this->m_face_value_isSet = true;
}

bool QTkfInvestOaOrderbook::is_face_value_Set() const{
    return m_face_value_isSet;
}

bool QTkfInvestOaOrderbook::is_face_value_Valid() const{
    return m_face_value_isValid;
}

double QTkfInvestOaOrderbook::getLastPrice() const {
    return last_price;
}
void QTkfInvestOaOrderbook::setLastPrice(const double &last_price) {
    this->last_price = last_price;
    this->m_last_price_isSet = true;
}

bool QTkfInvestOaOrderbook::is_last_price_Set() const{
    return m_last_price_isSet;
}

bool QTkfInvestOaOrderbook::is_last_price_Valid() const{
    return m_last_price_isValid;
}

double QTkfInvestOaOrderbook::getClosePrice() const {
    return close_price;
}
void QTkfInvestOaOrderbook::setClosePrice(const double &close_price) {
    this->close_price = close_price;
    this->m_close_price_isSet = true;
}

bool QTkfInvestOaOrderbook::is_close_price_Set() const{
    return m_close_price_isSet;
}

bool QTkfInvestOaOrderbook::is_close_price_Valid() const{
    return m_close_price_isValid;
}

double QTkfInvestOaOrderbook::getLimitUp() const {
    return limit_up;
}
void QTkfInvestOaOrderbook::setLimitUp(const double &limit_up) {
    this->limit_up = limit_up;
    this->m_limit_up_isSet = true;
}

bool QTkfInvestOaOrderbook::is_limit_up_Set() const{
    return m_limit_up_isSet;
}

bool QTkfInvestOaOrderbook::is_limit_up_Valid() const{
    return m_limit_up_isValid;
}

double QTkfInvestOaOrderbook::getLimitDown() const {
    return limit_down;
}
void QTkfInvestOaOrderbook::setLimitDown(const double &limit_down) {
    this->limit_down = limit_down;
    this->m_limit_down_isSet = true;
}

bool QTkfInvestOaOrderbook::is_limit_down_Set() const{
    return m_limit_down_isSet;
}

bool QTkfInvestOaOrderbook::is_limit_down_Valid() const{
    return m_limit_down_isValid;
}

bool QTkfInvestOaOrderbook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (bids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (asks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (trade_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_price_increment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_down_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool QTkfInvestOaOrderbook::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_figi_isValid && m_depth_isValid && m_bids_isValid && m_asks_isValid && m_trade_status_isValid && m_min_price_increment_isValid && true;
}

} // namespace OpenAPI
