/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OrdersApi_H
#define _OrdersApi_H

#include "HttpRequest.h"

#include "Empty.h"
#include "Error.h"
#include "LimitOrderRequest.h"
#include "LimitOrderResponse.h"
#include "MarketOrderRequest.h"
#include "MarketOrderResponse.h"
#include "OrdersResponse.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OrdersApi : public QObject {
    Q_OBJECT

public:
    OrdersApi(const QString &scheme = "https", const QString &host = "api-invest.tinkoff.ru", int port = 0, const QString &basePath = "/openapi", const int timeOut = 0);
    ~OrdersApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void ordersCancelPost(const QString &order_id, const QString &broker_account_id);
    void ordersGet(const QString &broker_account_id);
    void ordersLimitOrderPost(const QString &figi, const LimitOrderRequest &limit_order_request, const QString &broker_account_id);
    void ordersMarketOrderPost(const QString &figi, const MarketOrderRequest &market_order_request, const QString &broker_account_id);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void ordersCancelPostCallback(HttpRequestWorker *worker);
    void ordersGetCallback(HttpRequestWorker *worker);
    void ordersLimitOrderPostCallback(HttpRequestWorker *worker);
    void ordersMarketOrderPostCallback(HttpRequestWorker *worker);

signals:

    void ordersCancelPostSignal(Empty summary);
    void ordersGetSignal(OrdersResponse summary);
    void ordersLimitOrderPostSignal(LimitOrderResponse summary);
    void ordersMarketOrderPostSignal(MarketOrderResponse summary);

    void ordersCancelPostSignalFull(HttpRequestWorker *worker, Empty summary);
    void ordersGetSignalFull(HttpRequestWorker *worker, OrdersResponse summary);
    void ordersLimitOrderPostSignalFull(HttpRequestWorker *worker, LimitOrderResponse summary);
    void ordersMarketOrderPostSignalFull(HttpRequestWorker *worker, MarketOrderResponse summary);

    void ordersCancelPostSignalE(Empty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersGetSignalE(OrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersLimitOrderPostSignalE(LimitOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersMarketOrderPostSignalE(MarketOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void ordersCancelPostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersGetSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersLimitOrderPostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersMarketOrderPostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
