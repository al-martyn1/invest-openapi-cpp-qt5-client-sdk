/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaCandleResolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "QTkfInvestOaHelpers.h"

namespace OpenAPI {

QTkfInvestOaCandleResolution::QTkfInvestOaCandleResolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

QTkfInvestOaCandleResolution::QTkfInvestOaCandleResolution() {
    this->initializeModel();
}

QTkfInvestOaCandleResolution::~QTkfInvestOaCandleResolution() {}

void QTkfInvestOaCandleResolution::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eQTkfInvestOaCandleResolution::INVALID_VALUE_OPENAPI_GENERATED;
}

void QTkfInvestOaCandleResolution::fromJson(QString jsonString) {
    
    if ( jsonString.compare("1min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_1MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("2min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_2MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("3min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_3MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("5min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_5MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("10min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_10MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("15min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_15MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("30min", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::_30MIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hour", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::HOUR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("day", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::DAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("week", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::WEEK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("month", Qt::CaseInsensitive) == 0) {
        m_value = eQTkfInvestOaCandleResolution::MONTH;
        m_value_isSet = m_value_isValid = true;
    }
}

void QTkfInvestOaCandleResolution::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString QTkfInvestOaCandleResolution::asJson() const {
    
    QString val;
    switch (m_value){
        case eQTkfInvestOaCandleResolution::_1MIN:
            val = "1min";
            break;
        case eQTkfInvestOaCandleResolution::_2MIN:
            val = "2min";
            break;
        case eQTkfInvestOaCandleResolution::_3MIN:
            val = "3min";
            break;
        case eQTkfInvestOaCandleResolution::_5MIN:
            val = "5min";
            break;
        case eQTkfInvestOaCandleResolution::_10MIN:
            val = "10min";
            break;
        case eQTkfInvestOaCandleResolution::_15MIN:
            val = "15min";
            break;
        case eQTkfInvestOaCandleResolution::_30MIN:
            val = "30min";
            break;
        case eQTkfInvestOaCandleResolution::HOUR:
            val = "hour";
            break;
        case eQTkfInvestOaCandleResolution::DAY:
            val = "day";
            break;
        case eQTkfInvestOaCandleResolution::WEEK:
            val = "week";
            break;
        case eQTkfInvestOaCandleResolution::MONTH:
            val = "month";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue QTkfInvestOaCandleResolution::asJsonValue() const {
    
    return QJsonValue(asJson());
}


QTkfInvestOaCandleResolution::eQTkfInvestOaCandleResolution QTkfInvestOaCandleResolution::getValue() const {
    return m_value;
}

void QTkfInvestOaCandleResolution::setValue(const QTkfInvestOaCandleResolution::eQTkfInvestOaCandleResolution& value){
    m_value = value;
    m_value_isSet = true;
}
bool QTkfInvestOaCandleResolution::isSet() const {
    
    return m_value_isSet;
}

bool QTkfInvestOaCandleResolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
