/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "MarketInstrumentList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace OpenAPI {

MarketInstrumentList::MarketInstrumentList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

MarketInstrumentList::MarketInstrumentList() {
    this->initializeModel();
}

MarketInstrumentList::~MarketInstrumentList() {}

void MarketInstrumentList::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_instruments_isSet = false;
    m_instruments_isValid = false;
}

void MarketInstrumentList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void MarketInstrumentList::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_instruments_isValid = ::OpenAPI::fromJsonValue(instruments, json[QString("instruments")]);
    m_instruments_isSet = !json[QString("instruments")].isNull() && m_instruments_isValid;
}

QString MarketInstrumentList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject MarketInstrumentList::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(total));
    }
    if (instruments.size() > 0) {
        obj.insert(QString("instruments"), ::OpenAPI::toJsonValue(instruments));
    }
    return obj;
}

marty::Decimal MarketInstrumentList::getTotal() const {
    return total;
}
void MarketInstrumentList::setTotal(const marty::Decimal &total) {
    this->total = total;
    this->m_total_isSet = true;
}

bool MarketInstrumentList::is_total_Set() const{
    return m_total_isSet;
}

bool MarketInstrumentList::is_total_Valid() const{
    return m_total_isValid;
}

QList<MarketInstrument> MarketInstrumentList::getInstruments() const {
    return instruments;
}
void MarketInstrumentList::setInstruments(const QList<MarketInstrument> &instruments) {
    this->instruments = instruments;
    this->m_instruments_isSet = true;
}

bool MarketInstrumentList::is_instruments_Set() const{
    return m_instruments_isSet;
}

bool MarketInstrumentList::is_instruments_Valid() const{
    return m_instruments_isValid;
}

bool MarketInstrumentList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (instruments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool MarketInstrumentList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_isValid && m_instruments_isValid && true;
}

} // namespace OpenAPI
