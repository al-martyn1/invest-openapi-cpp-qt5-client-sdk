/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PortfolioPosition.h
 *
 * 
 */

#ifndef PortfolioPosition_H
#define PortfolioPosition_H

#include <QJsonObject>

#include "InstrumentType.h"
#include "MoneyAmount.h"
#include <QString>

#include "Enum.h"
#include "Object.h"

namespace OpenAPI {

class PortfolioPosition : public Object {
public:
    PortfolioPosition();
    PortfolioPosition(QString json);
    ~PortfolioPosition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFigi() const;
    void setFigi(const QString &figi);
    bool is_figi_Set() const;
    bool is_figi_Valid() const;

    QString getTicker() const;
    void setTicker(const QString &ticker);
    bool is_ticker_Set() const;
    bool is_ticker_Valid() const;

    QString getIsin() const;
    void setIsin(const QString &isin);
    bool is_isin_Set() const;
    bool is_isin_Valid() const;

    InstrumentType getInstrumentType() const;
    void setInstrumentType(const InstrumentType &instrument_type);
    bool is_instrument_type_Set() const;
    bool is_instrument_type_Valid() const;

    double getBalance() const;
    void setBalance(const double &balance);
    bool is_balance_Set() const;
    bool is_balance_Valid() const;

    double getBlocked() const;
    void setBlocked(const double &blocked);
    bool is_blocked_Set() const;
    bool is_blocked_Valid() const;

    MoneyAmount getExpectedYield() const;
    void setExpectedYield(const MoneyAmount &expected_yield);
    bool is_expected_yield_Set() const;
    bool is_expected_yield_Valid() const;

    qint32 getLots() const;
    void setLots(const qint32 &lots);
    bool is_lots_Set() const;
    bool is_lots_Valid() const;

    MoneyAmount getAveragePositionPrice() const;
    void setAveragePositionPrice(const MoneyAmount &average_position_price);
    bool is_average_position_price_Set() const;
    bool is_average_position_price_Valid() const;

    MoneyAmount getAveragePositionPriceNoNkd() const;
    void setAveragePositionPriceNoNkd(const MoneyAmount &average_position_price_no_nkd);
    bool is_average_position_price_no_nkd_Set() const;
    bool is_average_position_price_no_nkd_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString figi;
    bool m_figi_isSet;
    bool m_figi_isValid;

    QString ticker;
    bool m_ticker_isSet;
    bool m_ticker_isValid;

    QString isin;
    bool m_isin_isSet;
    bool m_isin_isValid;

    InstrumentType instrument_type;
    bool m_instrument_type_isSet;
    bool m_instrument_type_isValid;

    double balance;
    bool m_balance_isSet;
    bool m_balance_isValid;

    double blocked;
    bool m_blocked_isSet;
    bool m_blocked_isValid;

    MoneyAmount expected_yield;
    bool m_expected_yield_isSet;
    bool m_expected_yield_isValid;

    qint32 lots;
    bool m_lots_isSet;
    bool m_lots_isValid;

    MoneyAmount average_position_price;
    bool m_average_position_price_isSet;
    bool m_average_position_price_isValid;

    MoneyAmount average_position_price_no_nkd;
    bool m_average_position_price_no_nkd_isSet;
    bool m_average_position_price_no_nkd_isValid;

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::PortfolioPosition)

#endif // PortfolioPosition_H
