/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Operation.h
 *
 * 
 */

#ifndef Operation_H
#define Operation_H

#include <QJsonObject>

#include "Currency.h"
#include "InstrumentType.h"
#include "MoneyAmount.h"
#include "OperationStatus.h"
#include "OperationTrade.h"
#include "OperationTypeWithCommission.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "Enum.h"
#include "Object.h"

namespace OpenAPI {

class Operation : public Object {
public:
    Operation();
    Operation(QString json);
    ~Operation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OperationStatus getStatus() const;
    void setStatus(const OperationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OperationTrade> getTrades() const;
    void setTrades(const QList<OperationTrade> &trades);
    bool is_trades_Set() const;
    bool is_trades_Valid() const;

    MoneyAmount getCommission() const;
    void setCommission(const MoneyAmount &commission);
    bool is_commission_Set() const;
    bool is_commission_Valid() const;

    Currency getCurrency() const;
    void setCurrency(const Currency &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    double getPayment() const;
    void setPayment(const double &payment);
    bool is_payment_Set() const;
    bool is_payment_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    qint32 getQuantityExecuted() const;
    void setQuantityExecuted(const qint32 &quantity_executed);
    bool is_quantity_executed_Set() const;
    bool is_quantity_executed_Valid() const;

    QString getFigi() const;
    void setFigi(const QString &figi);
    bool is_figi_Set() const;
    bool is_figi_Valid() const;

    InstrumentType getInstrumentType() const;
    void setInstrumentType(const InstrumentType &instrument_type);
    bool is_instrument_type_Set() const;
    bool is_instrument_type_Valid() const;

    bool isIsMarginCall() const;
    void setIsMarginCall(const bool &is_margin_call);
    bool is_is_margin_call_Set() const;
    bool is_is_margin_call_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    OperationTypeWithCommission getOperationType() const;
    void setOperationType(const OperationTypeWithCommission &operation_type);
    bool is_operation_type_Set() const;
    bool is_operation_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString id;
    bool m_id_isSet;
    bool m_id_isValid;

    OperationStatus status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OperationTrade> trades;
    bool m_trades_isSet;
    bool m_trades_isValid;

    MoneyAmount commission;
    bool m_commission_isSet;
    bool m_commission_isValid;

    Currency currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    double payment;
    bool m_payment_isSet;
    bool m_payment_isValid;

    double price;
    bool m_price_isSet;
    bool m_price_isValid;

    qint32 quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    qint32 quantity_executed;
    bool m_quantity_executed_isSet;
    bool m_quantity_executed_isValid;

    QString figi;
    bool m_figi_isSet;
    bool m_figi_isValid;

    InstrumentType instrument_type;
    bool m_instrument_type_isSet;
    bool m_instrument_type_isValid;

    bool is_margin_call;
    bool m_is_margin_call_isSet;
    bool m_is_margin_call_isValid;

    QDateTime date;
    bool m_date_isSet;
    bool m_date_isValid;

    OperationTypeWithCommission operation_type;
    bool m_operation_type_isSet;
    bool m_operation_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::Operation)

#endif // Operation_H
