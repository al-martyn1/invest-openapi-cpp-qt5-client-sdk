/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Operation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace OpenAPI {

Operation::Operation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

Operation::Operation() {
    this->initializeModel();
}

Operation::~Operation() {}

void Operation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trades_isSet = false;
    m_trades_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_quantity_executed_isSet = false;
    m_quantity_executed_isValid = false;

    m_figi_isSet = false;
    m_figi_isValid = false;

    m_instrument_type_isSet = false;
    m_instrument_type_isValid = false;

    m_is_margin_call_isSet = false;
    m_is_margin_call_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;
}

void Operation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void Operation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trades_isValid = ::OpenAPI::fromJsonValue(trades, json[QString("trades")]);
    m_trades_isSet = !json[QString("trades")].isNull() && m_trades_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_quantity_executed_isValid = ::OpenAPI::fromJsonValue(quantity_executed, json[QString("quantityExecuted")]);
    m_quantity_executed_isSet = !json[QString("quantityExecuted")].isNull() && m_quantity_executed_isValid;

    m_figi_isValid = ::OpenAPI::fromJsonValue(figi, json[QString("figi")]);
    m_figi_isSet = !json[QString("figi")].isNull() && m_figi_isValid;

    m_instrument_type_isValid = ::OpenAPI::fromJsonValue(instrument_type, json[QString("instrumentType")]);
    m_instrument_type_isSet = !json[QString("instrumentType")].isNull() && m_instrument_type_isValid;

    m_is_margin_call_isValid = ::OpenAPI::fromJsonValue(is_margin_call, json[QString("isMarginCall")]);
    m_is_margin_call_isSet = !json[QString("isMarginCall")].isNull() && m_is_margin_call_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;
}

QString Operation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject Operation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (trades.size() > 0) {
        obj.insert(QString("trades"), ::OpenAPI::toJsonValue(trades));
    }
    if (commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(commission));
    }
    if (currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(currency));
    }
    if (m_payment_isSet) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(payment));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(quantity));
    }
    if (m_quantity_executed_isSet) {
        obj.insert(QString("quantityExecuted"), ::OpenAPI::toJsonValue(quantity_executed));
    }
    if (m_figi_isSet) {
        obj.insert(QString("figi"), ::OpenAPI::toJsonValue(figi));
    }
    if (instrument_type.isSet()) {
        obj.insert(QString("instrumentType"), ::OpenAPI::toJsonValue(instrument_type));
    }
    if (m_is_margin_call_isSet) {
        obj.insert(QString("isMarginCall"), ::OpenAPI::toJsonValue(is_margin_call));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(date));
    }
    if (operation_type.isSet()) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(operation_type));
    }
    return obj;
}

QString Operation::getId() const {
    return id;
}
void Operation::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool Operation::is_id_Set() const{
    return m_id_isSet;
}

bool Operation::is_id_Valid() const{
    return m_id_isValid;
}

OperationStatus Operation::getStatus() const {
    return status;
}
void Operation::setStatus(const OperationStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool Operation::is_status_Set() const{
    return m_status_isSet;
}

bool Operation::is_status_Valid() const{
    return m_status_isValid;
}

QList<OperationTrade> Operation::getTrades() const {
    return trades;
}
void Operation::setTrades(const QList<OperationTrade> &trades) {
    this->trades = trades;
    this->m_trades_isSet = true;
}

bool Operation::is_trades_Set() const{
    return m_trades_isSet;
}

bool Operation::is_trades_Valid() const{
    return m_trades_isValid;
}

MoneyAmount Operation::getCommission() const {
    return commission;
}
void Operation::setCommission(const MoneyAmount &commission) {
    this->commission = commission;
    this->m_commission_isSet = true;
}

bool Operation::is_commission_Set() const{
    return m_commission_isSet;
}

bool Operation::is_commission_Valid() const{
    return m_commission_isValid;
}

Currency Operation::getCurrency() const {
    return currency;
}
void Operation::setCurrency(const Currency &currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

bool Operation::is_currency_Set() const{
    return m_currency_isSet;
}

bool Operation::is_currency_Valid() const{
    return m_currency_isValid;
}

double Operation::getPayment() const {
    return payment;
}
void Operation::setPayment(const double &payment) {
    this->payment = payment;
    this->m_payment_isSet = true;
}

bool Operation::is_payment_Set() const{
    return m_payment_isSet;
}

bool Operation::is_payment_Valid() const{
    return m_payment_isValid;
}

double Operation::getPrice() const {
    return price;
}
void Operation::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool Operation::is_price_Set() const{
    return m_price_isSet;
}

bool Operation::is_price_Valid() const{
    return m_price_isValid;
}

qint32 Operation::getQuantity() const {
    return quantity;
}
void Operation::setQuantity(const qint32 &quantity) {
    this->quantity = quantity;
    this->m_quantity_isSet = true;
}

bool Operation::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool Operation::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 Operation::getQuantityExecuted() const {
    return quantity_executed;
}
void Operation::setQuantityExecuted(const qint32 &quantity_executed) {
    this->quantity_executed = quantity_executed;
    this->m_quantity_executed_isSet = true;
}

bool Operation::is_quantity_executed_Set() const{
    return m_quantity_executed_isSet;
}

bool Operation::is_quantity_executed_Valid() const{
    return m_quantity_executed_isValid;
}

QString Operation::getFigi() const {
    return figi;
}
void Operation::setFigi(const QString &figi) {
    this->figi = figi;
    this->m_figi_isSet = true;
}

bool Operation::is_figi_Set() const{
    return m_figi_isSet;
}

bool Operation::is_figi_Valid() const{
    return m_figi_isValid;
}

InstrumentType Operation::getInstrumentType() const {
    return instrument_type;
}
void Operation::setInstrumentType(const InstrumentType &instrument_type) {
    this->instrument_type = instrument_type;
    this->m_instrument_type_isSet = true;
}

bool Operation::is_instrument_type_Set() const{
    return m_instrument_type_isSet;
}

bool Operation::is_instrument_type_Valid() const{
    return m_instrument_type_isValid;
}

bool Operation::isIsMarginCall() const {
    return is_margin_call;
}
void Operation::setIsMarginCall(const bool &is_margin_call) {
    this->is_margin_call = is_margin_call;
    this->m_is_margin_call_isSet = true;
}

bool Operation::is_is_margin_call_Set() const{
    return m_is_margin_call_isSet;
}

bool Operation::is_is_margin_call_Valid() const{
    return m_is_margin_call_isValid;
}

QDateTime Operation::getDate() const {
    return date;
}
void Operation::setDate(const QDateTime &date) {
    this->date = date;
    this->m_date_isSet = true;
}

bool Operation::is_date_Set() const{
    return m_date_isSet;
}

bool Operation::is_date_Valid() const{
    return m_date_isValid;
}

OperationTypeWithCommission Operation::getOperationType() const {
    return operation_type;
}
void Operation::setOperationType(const OperationTypeWithCommission &operation_type) {
    this->operation_type = operation_type;
    this->m_operation_type_isSet = true;
}

bool Operation::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool Operation::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

bool Operation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (trades.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_executed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (instrument_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_margin_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (operation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool Operation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && m_currency_isValid && m_payment_isValid && m_is_margin_call_isValid && m_date_isValid && true;
}

} // namespace OpenAPI
