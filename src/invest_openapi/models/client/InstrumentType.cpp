/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "InstrumentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "Helpers.h"

namespace OpenAPI {

InstrumentType::InstrumentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

InstrumentType::InstrumentType() {
    this->initializeModel();
}

InstrumentType::~InstrumentType() {}

void InstrumentType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eInstrumentType::INVALID_VALUE_OPENAPI_GENERATED;
}

void InstrumentType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Stock", Qt::CaseInsensitive) == 0) {
        m_value = eInstrumentType::STOCK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Currency", Qt::CaseInsensitive) == 0) {
        m_value = eInstrumentType::CURRENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bond", Qt::CaseInsensitive) == 0) {
        m_value = eInstrumentType::BOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Etf", Qt::CaseInsensitive) == 0) {
        m_value = eInstrumentType::ETF;
        m_value_isSet = m_value_isValid = true;
    }
}

void InstrumentType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString InstrumentType::asJson() const {
    
    QString val;
    switch (m_value){
        case eInstrumentType::STOCK:
            val = "Stock";
            break;
        case eInstrumentType::CURRENCY:
            val = "Currency";
            break;
        case eInstrumentType::BOND:
            val = "Bond";
            break;
        case eInstrumentType::ETF:
            val = "Etf";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue InstrumentType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


InstrumentType::eInstrumentType InstrumentType::getValue() const {
    return m_value;
}

void InstrumentType::setValue(const InstrumentType::eInstrumentType& value){
    m_value = value;
    m_value_isSet = true;
}
bool InstrumentType::isSet() const {
    
    return m_value_isSet;
}

bool InstrumentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
