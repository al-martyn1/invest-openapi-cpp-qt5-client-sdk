/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _SandboxApi_H
#define _SandboxApi_H

#include "HttpRequest.h"

#include "Empty.h"
#include "Error.h"
#include "SandboxRegisterRequest.h"
#include "SandboxRegisterResponse.h"
#include "SandboxSetCurrencyBalanceRequest.h"
#include "SandboxSetPositionBalanceRequest.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class SandboxApi : public QObject {
    Q_OBJECT

public:
    SandboxApi(const QString &scheme = "https", const QString &host = "api-invest.tinkoff.ru", int port = 0, const QString &basePath = "/openapi", const int timeOut = 0);
    ~SandboxApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    HttpRequestWorker* sandboxClearPost(const QString &broker_account_id);
    HttpRequestWorker* sandboxCurrenciesBalancePost(const SandboxSetCurrencyBalanceRequest &sandbox_set_currency_balance_request, const QString &broker_account_id);
    HttpRequestWorker* sandboxPositionsBalancePost(const SandboxSetPositionBalanceRequest &sandbox_set_position_balance_request, const QString &broker_account_id);
    HttpRequestWorker* sandboxRegisterPost(const SandboxRegisterRequest &sandbox_register_request);
    HttpRequestWorker* sandboxRemovePost(const QString &broker_account_id);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void sandboxClearPostCallback(HttpRequestWorker *worker);
    void sandboxCurrenciesBalancePostCallback(HttpRequestWorker *worker);
    void sandboxPositionsBalancePostCallback(HttpRequestWorker *worker);
    void sandboxRegisterPostCallback(HttpRequestWorker *worker);
    void sandboxRemovePostCallback(HttpRequestWorker *worker);

signals:

    void sandboxClearPostSignal(Empty summary);
    void sandboxCurrenciesBalancePostSignal(Empty summary);
    void sandboxPositionsBalancePostSignal(Empty summary);
    void sandboxRegisterPostSignal(SandboxRegisterResponse summary);
    void sandboxRemovePostSignal(Empty summary);

    void sandboxClearPostSignalFull(HttpRequestWorker *worker, Empty summary);
    void sandboxCurrenciesBalancePostSignalFull(HttpRequestWorker *worker, Empty summary);
    void sandboxPositionsBalancePostSignalFull(HttpRequestWorker *worker, Empty summary);
    void sandboxRegisterPostSignalFull(HttpRequestWorker *worker, SandboxRegisterResponse summary);
    void sandboxRemovePostSignalFull(HttpRequestWorker *worker, Empty summary);

    void sandboxClearPostSignalE(Empty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxCurrenciesBalancePostSignalE(Empty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPositionsBalancePostSignalE(Empty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRegisterPostSignalE(SandboxRegisterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRemovePostSignalE(Empty summary, QNetworkReply::NetworkError error_type, QString error_str);

    void sandboxClearPostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxCurrenciesBalancePostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPositionsBalancePostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRegisterPostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRemovePostSignalEFull(HttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
