/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "SandboxApi.h"
#include "Helpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

SandboxApi::SandboxApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

SandboxApi::~SandboxApi() {
}

void SandboxApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void SandboxApi::setHost(const QString &host) {
    _host = host;
}

void SandboxApi::setPort(int port) {
    _port = port;
}

void SandboxApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void SandboxApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void SandboxApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void SandboxApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void SandboxApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void SandboxApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void SandboxApi::abortRequests(){
    emit abortRequestsSignal();
}

HttpRequestWorker* SandboxApi::sandboxClearPost(const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/sandbox/clear");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    HttpRequestWorker *worker = new HttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    HttpRequestInput input(fullPath, "POST");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &HttpRequestWorker::on_execution_finished, this, &SandboxApi::sandboxClearPostCallback);
    connect(this, &SandboxApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);

    return worker;
}

void SandboxApi::sandboxClearPostCallback(HttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    Empty output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sandboxClearPostSignal(output);
        emit sandboxClearPostSignalFull(worker, output);
    } else {
        emit sandboxClearPostSignalE(output, error_type, error_str);
        emit sandboxClearPostSignalEFull(worker, error_type, error_str);
    }
}

HttpRequestWorker* SandboxApi::sandboxCurrenciesBalancePost(const SandboxSetCurrencyBalanceRequest &sandbox_set_currency_balance_request, const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/sandbox/currencies/balance");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    HttpRequestWorker *worker = new HttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    HttpRequestInput input(fullPath, "POST");

    QString output = sandbox_set_currency_balance_request.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &HttpRequestWorker::on_execution_finished, this, &SandboxApi::sandboxCurrenciesBalancePostCallback);
    connect(this, &SandboxApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);

    return worker;
}

void SandboxApi::sandboxCurrenciesBalancePostCallback(HttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    Empty output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sandboxCurrenciesBalancePostSignal(output);
        emit sandboxCurrenciesBalancePostSignalFull(worker, output);
    } else {
        emit sandboxCurrenciesBalancePostSignalE(output, error_type, error_str);
        emit sandboxCurrenciesBalancePostSignalEFull(worker, error_type, error_str);
    }
}

HttpRequestWorker* SandboxApi::sandboxPositionsBalancePost(const SandboxSetPositionBalanceRequest &sandbox_set_position_balance_request, const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/sandbox/positions/balance");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    HttpRequestWorker *worker = new HttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    HttpRequestInput input(fullPath, "POST");

    QString output = sandbox_set_position_balance_request.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &HttpRequestWorker::on_execution_finished, this, &SandboxApi::sandboxPositionsBalancePostCallback);
    connect(this, &SandboxApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);

    return worker;
}

void SandboxApi::sandboxPositionsBalancePostCallback(HttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    Empty output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sandboxPositionsBalancePostSignal(output);
        emit sandboxPositionsBalancePostSignalFull(worker, output);
    } else {
        emit sandboxPositionsBalancePostSignalE(output, error_type, error_str);
        emit sandboxPositionsBalancePostSignalEFull(worker, error_type, error_str);
    }
}

HttpRequestWorker* SandboxApi::sandboxRegisterPost(const SandboxRegisterRequest &sandbox_register_request) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/sandbox/register");

    HttpRequestWorker *worker = new HttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    HttpRequestInput input(fullPath, "POST");

    QString output = sandbox_register_request.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &HttpRequestWorker::on_execution_finished, this, &SandboxApi::sandboxRegisterPostCallback);
    connect(this, &SandboxApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);

    return worker;
}

void SandboxApi::sandboxRegisterPostCallback(HttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    SandboxRegisterResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sandboxRegisterPostSignal(output);
        emit sandboxRegisterPostSignalFull(worker, output);
    } else {
        emit sandboxRegisterPostSignalE(output, error_type, error_str);
        emit sandboxRegisterPostSignalEFull(worker, error_type, error_str);
    }
}

HttpRequestWorker* SandboxApi::sandboxRemovePost(const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/sandbox/remove");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    HttpRequestWorker *worker = new HttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    HttpRequestInput input(fullPath, "POST");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &HttpRequestWorker::on_execution_finished, this, &SandboxApi::sandboxRemovePostCallback);
    connect(this, &SandboxApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);

    return worker;
}

void SandboxApi::sandboxRemovePostCallback(HttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    Empty output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sandboxRemovePostSignal(output);
        emit sandboxRemovePostSignalFull(worker, output);
    } else {
        emit sandboxRemovePostSignalE(output, error_type, error_str);
        emit sandboxRemovePostSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
