/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaOrdersApi.h"
#include "QTkfInvestOaHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

QTkfInvestOaOrdersApi::QTkfInvestOaOrdersApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

QTkfInvestOaOrdersApi::~QTkfInvestOaOrdersApi() {
}

void QTkfInvestOaOrdersApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void QTkfInvestOaOrdersApi::setHost(const QString &host) {
    _host = host;
}

void QTkfInvestOaOrdersApi::setPort(int port) {
    _port = port;
}

void QTkfInvestOaOrdersApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void QTkfInvestOaOrdersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void QTkfInvestOaOrdersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void QTkfInvestOaOrdersApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void QTkfInvestOaOrdersApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void QTkfInvestOaOrdersApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void QTkfInvestOaOrdersApi::abortRequests(){
    emit abortRequestsSignal();
}

void QTkfInvestOaOrdersApi::ordersCancelPost(const QString &order_id, const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/orders/cancel");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("orderId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(order_id)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    QTkfInvestOaHttpRequestWorker *worker = new QTkfInvestOaHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    QTkfInvestOaHttpRequestInput input(fullPath, "POST");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &QTkfInvestOaHttpRequestWorker::on_execution_finished, this, &QTkfInvestOaOrdersApi::ordersCancelPostCallback);
    connect(this, &QTkfInvestOaOrdersApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void QTkfInvestOaOrdersApi::ordersCancelPostCallback(QTkfInvestOaHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QTkfInvestOaEmpty output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ordersCancelPostSignal(output);
        emit ordersCancelPostSignalFull(worker, output);
    } else {
        emit ordersCancelPostSignalE(output, error_type, error_str);
        emit ordersCancelPostSignalEFull(worker, error_type, error_str);
    }
}

void QTkfInvestOaOrdersApi::ordersGet(const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/orders");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    QTkfInvestOaHttpRequestWorker *worker = new QTkfInvestOaHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    QTkfInvestOaHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &QTkfInvestOaHttpRequestWorker::on_execution_finished, this, &QTkfInvestOaOrdersApi::ordersGetCallback);
    connect(this, &QTkfInvestOaOrdersApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void QTkfInvestOaOrdersApi::ordersGetCallback(QTkfInvestOaHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QTkfInvestOaOrdersResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ordersGetSignal(output);
        emit ordersGetSignalFull(worker, output);
    } else {
        emit ordersGetSignalE(output, error_type, error_str);
        emit ordersGetSignalEFull(worker, error_type, error_str);
    }
}

void QTkfInvestOaOrdersApi::ordersLimitOrderPost(const QString &figi, const QTkfInvestOaLimitOrderRequest &q_tkf_invest_oa_limit_order_request, const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/orders/limit-order");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("figi")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(figi)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    QTkfInvestOaHttpRequestWorker *worker = new QTkfInvestOaHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    QTkfInvestOaHttpRequestInput input(fullPath, "POST");

    QString output = q_tkf_invest_oa_limit_order_request.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &QTkfInvestOaHttpRequestWorker::on_execution_finished, this, &QTkfInvestOaOrdersApi::ordersLimitOrderPostCallback);
    connect(this, &QTkfInvestOaOrdersApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void QTkfInvestOaOrdersApi::ordersLimitOrderPostCallback(QTkfInvestOaHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QTkfInvestOaLimitOrderResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ordersLimitOrderPostSignal(output);
        emit ordersLimitOrderPostSignalFull(worker, output);
    } else {
        emit ordersLimitOrderPostSignalE(output, error_type, error_str);
        emit ordersLimitOrderPostSignalEFull(worker, error_type, error_str);
    }
}

void QTkfInvestOaOrdersApi::ordersMarketOrderPost(const QString &figi, const QTkfInvestOaMarketOrderRequest &q_tkf_invest_oa_market_order_request, const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/orders/market-order");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("figi")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(figi)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    QTkfInvestOaHttpRequestWorker *worker = new QTkfInvestOaHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    QTkfInvestOaHttpRequestInput input(fullPath, "POST");

    QString output = q_tkf_invest_oa_market_order_request.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &QTkfInvestOaHttpRequestWorker::on_execution_finished, this, &QTkfInvestOaOrdersApi::ordersMarketOrderPostCallback);
    connect(this, &QTkfInvestOaOrdersApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void QTkfInvestOaOrdersApi::ordersMarketOrderPostCallback(QTkfInvestOaHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QTkfInvestOaMarketOrderResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit ordersMarketOrderPostSignal(output);
        emit ordersMarketOrderPostSignalFull(worker, output);
    } else {
        emit ordersMarketOrderPostSignalE(output, error_type, error_str);
        emit ordersMarketOrderPostSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
