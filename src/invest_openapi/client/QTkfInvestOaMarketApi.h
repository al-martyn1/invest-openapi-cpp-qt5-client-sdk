/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef QTkfInvestOa_QTkfInvestOaMarketApi_H
#define QTkfInvestOa_QTkfInvestOaMarketApi_H

#include "QTkfInvestOaHttpRequest.h"

#include "QTkfInvestOaCandleResolution.h"
#include "QTkfInvestOaCandlesResponse.h"
#include "QTkfInvestOaError.h"
#include "QTkfInvestOaMarketInstrumentListResponse.h"
#include "QTkfInvestOaOrderbookResponse.h"
#include "QTkfInvestOaSearchMarketInstrumentResponse.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class QTkfInvestOaMarketApi : public QObject {
    Q_OBJECT

public:
    QTkfInvestOaMarketApi(const QString &scheme = "https", const QString &host = "api-invest.tinkoff.ru", int port = 0, const QString &basePath = "/openapi", const int timeOut = 0);
    ~QTkfInvestOaMarketApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void marketBondsGet();
    void marketCandlesGet(const QString &figi, const QDateTime &from, const QDateTime &to, const QTkfInvestOaCandleResolution &interval);
    void marketCurrenciesGet();
    void marketEtfsGet();
    void marketOrderbookGet(const QString &figi, const qint32 &depth);
    void marketSearchByFigiGet(const QString &figi);
    void marketSearchByTickerGet(const QString &ticker);
    void marketStocksGet();

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void marketBondsGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketCandlesGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketCurrenciesGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketEtfsGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketOrderbookGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketSearchByFigiGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketSearchByTickerGetCallback(QTkfInvestOaHttpRequestWorker *worker);
    void marketStocksGetCallback(QTkfInvestOaHttpRequestWorker *worker);

signals:

    void marketBondsGetSignal(QTkfInvestOaMarketInstrumentListResponse summary);
    void marketCandlesGetSignal(QTkfInvestOaCandlesResponse summary);
    void marketCurrenciesGetSignal(QTkfInvestOaMarketInstrumentListResponse summary);
    void marketEtfsGetSignal(QTkfInvestOaMarketInstrumentListResponse summary);
    void marketOrderbookGetSignal(QTkfInvestOaOrderbookResponse summary);
    void marketSearchByFigiGetSignal(QTkfInvestOaSearchMarketInstrumentResponse summary);
    void marketSearchByTickerGetSignal(QTkfInvestOaMarketInstrumentListResponse summary);
    void marketStocksGetSignal(QTkfInvestOaMarketInstrumentListResponse summary);

    void marketBondsGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaMarketInstrumentListResponse summary);
    void marketCandlesGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaCandlesResponse summary);
    void marketCurrenciesGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaMarketInstrumentListResponse summary);
    void marketEtfsGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaMarketInstrumentListResponse summary);
    void marketOrderbookGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaOrderbookResponse summary);
    void marketSearchByFigiGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaSearchMarketInstrumentResponse summary);
    void marketSearchByTickerGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaMarketInstrumentListResponse summary);
    void marketStocksGetSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaMarketInstrumentListResponse summary);

    void marketBondsGetSignalE(QTkfInvestOaMarketInstrumentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketCandlesGetSignalE(QTkfInvestOaCandlesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketCurrenciesGetSignalE(QTkfInvestOaMarketInstrumentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketEtfsGetSignalE(QTkfInvestOaMarketInstrumentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketOrderbookGetSignalE(QTkfInvestOaOrderbookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSearchByFigiGetSignalE(QTkfInvestOaSearchMarketInstrumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSearchByTickerGetSignalE(QTkfInvestOaMarketInstrumentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void marketStocksGetSignalE(QTkfInvestOaMarketInstrumentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void marketBondsGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketCandlesGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketCurrenciesGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketEtfsGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketOrderbookGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSearchByFigiGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketSearchByTickerGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void marketStocksGetSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
