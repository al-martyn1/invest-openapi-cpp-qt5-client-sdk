/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaOperationsApi.h"
#include "QTkfInvestOaHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

QTkfInvestOaOperationsApi::QTkfInvestOaOperationsApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

QTkfInvestOaOperationsApi::~QTkfInvestOaOperationsApi() {
}

void QTkfInvestOaOperationsApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void QTkfInvestOaOperationsApi::setHost(const QString &host) {
    _host = host;
}

void QTkfInvestOaOperationsApi::setPort(int port) {
    _port = port;
}

void QTkfInvestOaOperationsApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void QTkfInvestOaOperationsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void QTkfInvestOaOperationsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void QTkfInvestOaOperationsApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void QTkfInvestOaOperationsApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void QTkfInvestOaOperationsApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void QTkfInvestOaOperationsApi::abortRequests(){
    emit abortRequestsSignal();
}

void QTkfInvestOaOperationsApi::operationsGet(const QDateTime &from, const QDateTime &to, const QString &figi, const QString &broker_account_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/operations");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("from")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(from)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("to")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(to)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("figi")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(figi)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("brokerAccountId")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(broker_account_id)));

    QTkfInvestOaHttpRequestWorker *worker = new QTkfInvestOaHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    QTkfInvestOaHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &QTkfInvestOaHttpRequestWorker::on_execution_finished, this, &QTkfInvestOaOperationsApi::operationsGetCallback);
    connect(this, &QTkfInvestOaOperationsApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void QTkfInvestOaOperationsApi::operationsGetCallback(QTkfInvestOaHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QTkfInvestOaOperationsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit operationsGetSignal(output);
        emit operationsGetSignalFull(worker, output);
    } else {
        emit operationsGetSignalE(output, error_type, error_str);
        emit operationsGetSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
