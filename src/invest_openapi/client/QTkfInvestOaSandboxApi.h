/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef QTkfInvestOa_QTkfInvestOaSandboxApi_H
#define QTkfInvestOa_QTkfInvestOaSandboxApi_H

#include "QTkfInvestOaHttpRequest.h"

#include "QTkfInvestOaEmpty.h"
#include "QTkfInvestOaError.h"
#include "QTkfInvestOaSandboxRegisterRequest.h"
#include "QTkfInvestOaSandboxRegisterResponse.h"
#include "QTkfInvestOaSandboxSetCurrencyBalanceRequest.h"
#include "QTkfInvestOaSandboxSetPositionBalanceRequest.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class QTkfInvestOaSandboxApi : public QObject {
    Q_OBJECT

public:
    QTkfInvestOaSandboxApi(const QString &scheme = "https", const QString &host = "api-invest.tinkoff.ru", int port = 0, const QString &basePath = "/openapi", const int timeOut = 0);
    ~QTkfInvestOaSandboxApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void sandboxClearPost(const QString &broker_account_id);
    void sandboxCurrenciesBalancePost(const QTkfInvestOaSandboxSetCurrencyBalanceRequest &q_tkf_invest_oa_sandbox_set_currency_balance_request, const QString &broker_account_id);
    void sandboxPositionsBalancePost(const QTkfInvestOaSandboxSetPositionBalanceRequest &q_tkf_invest_oa_sandbox_set_position_balance_request, const QString &broker_account_id);
    void sandboxRegisterPost(const QTkfInvestOaSandboxRegisterRequest &q_tkf_invest_oa_sandbox_register_request);
    void sandboxRemovePost(const QString &broker_account_id);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void sandboxClearPostCallback(QTkfInvestOaHttpRequestWorker *worker);
    void sandboxCurrenciesBalancePostCallback(QTkfInvestOaHttpRequestWorker *worker);
    void sandboxPositionsBalancePostCallback(QTkfInvestOaHttpRequestWorker *worker);
    void sandboxRegisterPostCallback(QTkfInvestOaHttpRequestWorker *worker);
    void sandboxRemovePostCallback(QTkfInvestOaHttpRequestWorker *worker);

signals:

    void sandboxClearPostSignal(QTkfInvestOaEmpty summary);
    void sandboxCurrenciesBalancePostSignal(QTkfInvestOaEmpty summary);
    void sandboxPositionsBalancePostSignal(QTkfInvestOaEmpty summary);
    void sandboxRegisterPostSignal(QTkfInvestOaSandboxRegisterResponse summary);
    void sandboxRemovePostSignal(QTkfInvestOaEmpty summary);

    void sandboxClearPostSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaEmpty summary);
    void sandboxCurrenciesBalancePostSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaEmpty summary);
    void sandboxPositionsBalancePostSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaEmpty summary);
    void sandboxRegisterPostSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaSandboxRegisterResponse summary);
    void sandboxRemovePostSignalFull(QTkfInvestOaHttpRequestWorker *worker, QTkfInvestOaEmpty summary);

    void sandboxClearPostSignalE(QTkfInvestOaEmpty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxCurrenciesBalancePostSignalE(QTkfInvestOaEmpty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPositionsBalancePostSignalE(QTkfInvestOaEmpty summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRegisterPostSignalE(QTkfInvestOaSandboxRegisterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRemovePostSignalE(QTkfInvestOaEmpty summary, QNetworkReply::NetworkError error_type, QString error_str);

    void sandboxClearPostSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxCurrenciesBalancePostSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPositionsBalancePostSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRegisterPostSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxRemovePostSignalEFull(QTkfInvestOaHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
