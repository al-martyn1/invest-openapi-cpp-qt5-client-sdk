/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "QTkfInvestOaPortfolioPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "QTkfInvestOaHelpers.h"

namespace OpenAPI {

QTkfInvestOaPortfolioPosition::QTkfInvestOaPortfolioPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

QTkfInvestOaPortfolioPosition::QTkfInvestOaPortfolioPosition() {
    this->initializeModel();
}

QTkfInvestOaPortfolioPosition::~QTkfInvestOaPortfolioPosition() {}

void QTkfInvestOaPortfolioPosition::initializeModel() {

    m_figi_isSet = false;
    m_figi_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_instrument_type_isSet = false;
    m_instrument_type_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_expected_yield_isSet = false;
    m_expected_yield_isValid = false;

    m_lots_isSet = false;
    m_lots_isValid = false;

    m_average_position_price_isSet = false;
    m_average_position_price_isValid = false;

    m_average_position_price_no_nkd_isSet = false;
    m_average_position_price_no_nkd_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void QTkfInvestOaPortfolioPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void QTkfInvestOaPortfolioPosition::fromJsonObject(QJsonObject json) {

    m_figi_isValid = ::OpenAPI::fromJsonValue(figi, json[QString("figi")]);
    m_figi_isSet = !json[QString("figi")].isNull() && m_figi_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_instrument_type_isValid = ::OpenAPI::fromJsonValue(instrument_type, json[QString("instrumentType")]);
    m_instrument_type_isSet = !json[QString("instrumentType")].isNull() && m_instrument_type_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_blocked_isValid = ::OpenAPI::fromJsonValue(blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_expected_yield_isValid = ::OpenAPI::fromJsonValue(expected_yield, json[QString("expectedYield")]);
    m_expected_yield_isSet = !json[QString("expectedYield")].isNull() && m_expected_yield_isValid;

    m_lots_isValid = ::OpenAPI::fromJsonValue(lots, json[QString("lots")]);
    m_lots_isSet = !json[QString("lots")].isNull() && m_lots_isValid;

    m_average_position_price_isValid = ::OpenAPI::fromJsonValue(average_position_price, json[QString("averagePositionPrice")]);
    m_average_position_price_isSet = !json[QString("averagePositionPrice")].isNull() && m_average_position_price_isValid;

    m_average_position_price_no_nkd_isValid = ::OpenAPI::fromJsonValue(average_position_price_no_nkd, json[QString("averagePositionPriceNoNkd")]);
    m_average_position_price_no_nkd_isSet = !json[QString("averagePositionPriceNoNkd")].isNull() && m_average_position_price_no_nkd_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString QTkfInvestOaPortfolioPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject QTkfInvestOaPortfolioPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_figi_isSet) {
        obj.insert(QString("figi"), ::OpenAPI::toJsonValue(figi));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(ticker));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(isin));
    }
    if (instrument_type.isSet()) {
        obj.insert(QString("instrumentType"), ::OpenAPI::toJsonValue(instrument_type));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(balance));
    }
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(blocked));
    }
    if (expected_yield.isSet()) {
        obj.insert(QString("expectedYield"), ::OpenAPI::toJsonValue(expected_yield));
    }
    if (m_lots_isSet) {
        obj.insert(QString("lots"), ::OpenAPI::toJsonValue(lots));
    }
    if (average_position_price.isSet()) {
        obj.insert(QString("averagePositionPrice"), ::OpenAPI::toJsonValue(average_position_price));
    }
    if (average_position_price_no_nkd.isSet()) {
        obj.insert(QString("averagePositionPriceNoNkd"), ::OpenAPI::toJsonValue(average_position_price_no_nkd));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    return obj;
}

QString QTkfInvestOaPortfolioPosition::getFigi() const {
    return figi;
}
void QTkfInvestOaPortfolioPosition::setFigi(const QString &figi) {
    this->figi = figi;
    this->m_figi_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_figi_Set() const{
    return m_figi_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_figi_Valid() const{
    return m_figi_isValid;
}

QString QTkfInvestOaPortfolioPosition::getTicker() const {
    return ticker;
}
void QTkfInvestOaPortfolioPosition::setTicker(const QString &ticker) {
    this->ticker = ticker;
    this->m_ticker_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_ticker_Valid() const{
    return m_ticker_isValid;
}

QString QTkfInvestOaPortfolioPosition::getIsin() const {
    return isin;
}
void QTkfInvestOaPortfolioPosition::setIsin(const QString &isin) {
    this->isin = isin;
    this->m_isin_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_isin_Set() const{
    return m_isin_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_isin_Valid() const{
    return m_isin_isValid;
}

QTkfInvestOaInstrumentType QTkfInvestOaPortfolioPosition::getInstrumentType() const {
    return instrument_type;
}
void QTkfInvestOaPortfolioPosition::setInstrumentType(const QTkfInvestOaInstrumentType &instrument_type) {
    this->instrument_type = instrument_type;
    this->m_instrument_type_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_instrument_type_Set() const{
    return m_instrument_type_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_instrument_type_Valid() const{
    return m_instrument_type_isValid;
}

double QTkfInvestOaPortfolioPosition::getBalance() const {
    return balance;
}
void QTkfInvestOaPortfolioPosition::setBalance(const double &balance) {
    this->balance = balance;
    this->m_balance_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_balance_Set() const{
    return m_balance_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_balance_Valid() const{
    return m_balance_isValid;
}

double QTkfInvestOaPortfolioPosition::getBlocked() const {
    return blocked;
}
void QTkfInvestOaPortfolioPosition::setBlocked(const double &blocked) {
    this->blocked = blocked;
    this->m_blocked_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_blocked_Valid() const{
    return m_blocked_isValid;
}

QTkfInvestOaMoneyAmount QTkfInvestOaPortfolioPosition::getExpectedYield() const {
    return expected_yield;
}
void QTkfInvestOaPortfolioPosition::setExpectedYield(const QTkfInvestOaMoneyAmount &expected_yield) {
    this->expected_yield = expected_yield;
    this->m_expected_yield_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_expected_yield_Set() const{
    return m_expected_yield_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_expected_yield_Valid() const{
    return m_expected_yield_isValid;
}

qint32 QTkfInvestOaPortfolioPosition::getLots() const {
    return lots;
}
void QTkfInvestOaPortfolioPosition::setLots(const qint32 &lots) {
    this->lots = lots;
    this->m_lots_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_lots_Set() const{
    return m_lots_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_lots_Valid() const{
    return m_lots_isValid;
}

QTkfInvestOaMoneyAmount QTkfInvestOaPortfolioPosition::getAveragePositionPrice() const {
    return average_position_price;
}
void QTkfInvestOaPortfolioPosition::setAveragePositionPrice(const QTkfInvestOaMoneyAmount &average_position_price) {
    this->average_position_price = average_position_price;
    this->m_average_position_price_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_average_position_price_Set() const{
    return m_average_position_price_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_average_position_price_Valid() const{
    return m_average_position_price_isValid;
}

QTkfInvestOaMoneyAmount QTkfInvestOaPortfolioPosition::getAveragePositionPriceNoNkd() const {
    return average_position_price_no_nkd;
}
void QTkfInvestOaPortfolioPosition::setAveragePositionPriceNoNkd(const QTkfInvestOaMoneyAmount &average_position_price_no_nkd) {
    this->average_position_price_no_nkd = average_position_price_no_nkd;
    this->m_average_position_price_no_nkd_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_average_position_price_no_nkd_Set() const{
    return m_average_position_price_no_nkd_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_average_position_price_no_nkd_Valid() const{
    return m_average_position_price_no_nkd_isValid;
}

QString QTkfInvestOaPortfolioPosition::getName() const {
    return name;
}
void QTkfInvestOaPortfolioPosition::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool QTkfInvestOaPortfolioPosition::is_name_Set() const{
    return m_name_isSet;
}

bool QTkfInvestOaPortfolioPosition::is_name_Valid() const{
    return m_name_isValid;
}

bool QTkfInvestOaPortfolioPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_figi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (instrument_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (expected_yield.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (average_position_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (average_position_price_no_nkd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool QTkfInvestOaPortfolioPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_figi_isValid && m_instrument_type_isValid && m_balance_isValid && m_lots_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
