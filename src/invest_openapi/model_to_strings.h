/*! \file
    \brief Autogenerated file
 */

#pragma once

#include <QVector>
#include <QString>

#include "models.h"
#include "models_helpers.h"
#include "utility.h"
#include "cpp/cpp.h"


namespace invest_openapi
{


using namespace OpenAPI;



template <typename ModelType> QVector<QString> modelMakeSqlSchemaStringVector( const QString &nameOrPrefix );
template <typename ModelType> QVector<QString> modelMakeSqlFieldsStringVector( const QString &nameOrPrefix );

inline QString modelMakeSqlCreateTableSchema( const QVector<QString> &sqlSchema )
{
    return mergeString( sqlSchema, "\r\n,"  );
}


//----------------------------------------------------------------------------
inline void appendToStringVector( QVector<QString> &vec, const QString &v )
{
    vec.append(v);
}

//----------------------------------------------------------------------------
inline void appendToStringVector( QVector<QString> &vec, const QVector<QString> &v )
{
    vec.append(v);
}

//----------------------------------------------------------------------------
inline QVector<QString> modelToStrings( const QString &s )
{
    QVector<QString> resVec;
    appendToStringVector( resVec, s );
    return resVec;
}

//----------------------------------------------------------------------------
inline QVector<QString> modelToStrings( const QVector<QString> &v )
{
    return v;
}

//----------------------------------------------------------------------------
inline QVector<QString> modelToStrings( const marty::Decimal &v )
{
    return modelToStrings( QString::fromStdString( marty::toString(v) ) );
}

//----------------------------------------------------------------------------




//----------------------------------------------------------------------------
inline
QVector<QString> stringToVector( const QString &s )
{
    QVector<QString> resVec;
    appendToStringVector( resVec, s );
    return resVec;
}

inline
QVector<QString> stringToVector( const std::string &s )
{
    return stringToVector( QString::fromStdString(s));
}

//----------------------------------------------------------------------------
template <typename ModelType> 
inline 
QVector<QString> modelToStringsConvertHelper( const ModelType &m )
{
    return stringToVector( m.asJson() );
}

//----------------------------------------------------------------------------




//----------------------------------------------------------------------------
inline QVector<QString> modelToStrings( const QDateTime         &v ) { return modelToStrings( formatDateTimeISO8601(v) ); }
inline QVector<QString> modelToStrings( const BrokerAccountType &v ) { return modelToStringsConvertHelper(v); }
inline QVector<QString> modelToStrings( const Currency          &v ) { return modelToStringsConvertHelper(v); }
inline QVector<QString> modelToStrings( const InstrumentType    &v ) { return modelToStringsConvertHelper(v); }
inline QVector<QString> modelToStrings( const CandleResolution  &v ) { return modelToStringsConvertHelper(v); }
inline QVector<QString> modelToStrings( const OperationType     &v ) { return modelToStringsConvertHelper(v); }
inline QVector<QString> modelToStrings( const OrderStatus       &v ) { return modelToStringsConvertHelper(v); }
inline QVector<QString> modelToStrings( const OrderType         &v ) { return modelToStringsConvertHelper(v); }

//----------------------------------------------------------------------------




//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<BrokerAccountType>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("VARCHAR(12)",16) );
}

//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<Currency>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("VARCHAR(4) NOT NULL",16) ); // UNIQUE
}

//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<InstrumentType>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("HIJACK",16) );
}

//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<CandleResolution>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("HIJACK",16) );
}

//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<OperationType>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("HIJACK",16) );
}

//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<OrderStatus>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("HIJACK",16) );
}

//----------------------------------------------------------------------------
template <> inline QVector<QString> modelMakeSqlSchemaStringVector<OrderType>( const QString &nameOrPrefix )
{
    return stringToVector( cpp::expandAtBack(nameOrPrefix.toStdString(),23) + cpp::expandAtBack("HIJACK",16) );
}

//----------------------------------------------------------------------------




//----------------------------------------------------------------------------

} // namespace invest_openapi


#include "model_to_strings_generated.h"


