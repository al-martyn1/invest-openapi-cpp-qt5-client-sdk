/*! \file
    \brief Autogenerated file
 */

#pragma once

#include <QVector>
#include <QString>

#include "models.h"
#include "models_helpers.h"
#include "utility.h"

namespace invest_openapi
{

using namespace OpenAPI;


//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
#ifndef INVEST_OPENAPI_GENERATED_MODEL_TO_STRINGS_DECLARED
#define INVEST_OPENAPI_GENERATED_MODEL_TO_STRINGS_DECLARED

QVector<QString> modelToStrings( const Empty &v );
QVector<QString> modelToStrings( const Error &v );
QVector<QString> modelToStrings( const UserAccount &v );
QVector<QString> modelToStrings( const CurrencyPosition &v );
QVector<QString> modelToStrings( const PortfolioPosition &v );
QVector<QString> modelToStrings( const MoneyAmount &v );
QVector<QString> modelToStrings( const Candle &v );
QVector<QString> modelToStrings( const OperationTrade &v );
QVector<QString> modelToStrings( const Order &v );
QVector<QString> modelToStrings( const PlacedLimitOrder &v );
QVector<QString> modelToStrings( const PlacedMarketOrder &v );
QVector<QString> modelToStrings( const SandboxAccount &v );
QVector<QString> modelToStrings( const SearchMarketInstrument &v );
QVector<QString> modelToStrings( const MarketInstrument &v );

#endif /* INVEST_OPENAPI_GENERATED_MODEL_TO_STRINGS_DECLARED */
//----------------------------------------------------------------------------



//----------------------------------------------------------------------------
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Empty >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Error >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< UserAccount >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< CurrencyPosition >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< PortfolioPosition >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< MoneyAmount >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Candle >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< OperationTrade >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Order >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< PlacedLimitOrder >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< PlacedMarketOrder >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< SandboxAccount >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< SearchMarketInstrument >( const QString &nameOrPrefix, bool forInlining );
template <> QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< MarketInstrument >( const QString &nameOrPrefix, bool forInlining );
//----------------------------------------------------------------------------




//----------------------------------------------------------------------------
#ifndef INVEST_OPENAPI_GENERATED_MODEL_TO_STRINGS_IMPLEMENTED
#define INVEST_OPENAPI_GENERATED_MODEL_TO_STRINGS_IMPLEMENTED

//----------------------------------------------------------------------------
//! Converts Empty to QVector of QString's 
inline QVector<QString> modelToStrings( const Empty &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_tracking_id_Set() || !v.is_tracking_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTrackingId() ) );

    //------------------------------
    if ( !v.is_payload_Set() || !v.is_payload_Valid() ) // type: object
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getPayload() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts Error to QVector of QString's 
inline QVector<QString> modelToStrings( const Error &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_tracking_id_Set() || !v.is_tracking_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTrackingId() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_payload_Set() || !v.is_payload_Valid() ) // type: object
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getPayload() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts UserAccount to QVector of QString's 
inline QVector<QString> modelToStrings( const UserAccount &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_broker_account_type_Set() || !v.is_broker_account_type_Valid() ) // type: BrokerAccountType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountType() ) );

    //------------------------------
    if ( !v.is_broker_account_id_Set() || !v.is_broker_account_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountId() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts CurrencyPosition to QVector of QString's 
inline QVector<QString> modelToStrings( const CurrencyPosition &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_balance_Set() || !v.is_balance_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBalance() ) );

    //------------------------------
    if ( !v.is_blocked_Set() || !v.is_blocked_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBlocked() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts PortfolioPosition to QVector of QString's 
inline QVector<QString> modelToStrings( const PortfolioPosition &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_ticker_Set() || !v.is_ticker_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTicker() ) );

    //------------------------------
    if ( !v.is_isin_Set() || !v.is_isin_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getIsin() ) );

    //------------------------------
    if ( !v.is_instrument_type_Set() || !v.is_instrument_type_Valid() ) // type: InstrumentType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getInstrumentType() ) );

    //------------------------------
    if ( !v.is_balance_Set() || !v.is_balance_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBalance() ) );

    //------------------------------
    if ( !v.is_blocked_Set() || !v.is_blocked_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBlocked() ) );

    //------------------------------
    if ( !v.is_expected_yield_Set() || !v.is_expected_yield_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExpectedYield() ) );

    //------------------------------
    if ( !v.is_lots_Set() || !v.is_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getLots() ) );

    //------------------------------
    if ( !v.is_average_position_price_Set() || !v.is_average_position_price_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getAveragePositionPrice() ) );

    //------------------------------
    if ( !v.is_average_position_price_no_nkd_Set() || !v.is_average_position_price_no_nkd_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getAveragePositionPriceNoNkd() ) );

    //------------------------------
    if ( !v.is_name_Set() || !v.is_name_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getName() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts MoneyAmount to QVector of QString's 
inline QVector<QString> modelToStrings( const MoneyAmount &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_value_Set() || !v.is_value_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getValue() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts Candle to QVector of QString's 
inline QVector<QString> modelToStrings( const Candle &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_interval_Set() || !v.is_interval_Valid() ) // type: CandleResolution
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getInterval() ) );

    //------------------------------
    if ( !v.is_o_Set() || !v.is_o_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getO() ) );

    //------------------------------
    if ( !v.is_c_Set() || !v.is_c_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getC() ) );

    //------------------------------
    if ( !v.is_h_Set() || !v.is_h_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getH() ) );

    //------------------------------
    if ( !v.is_l_Set() || !v.is_l_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getL() ) );

    //------------------------------
    if ( !v.is_v_Set() || !v.is_v_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getV() ) );

    //------------------------------
    if ( !v.is_time_Set() || !v.is_time_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTime() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts OperationTrade to QVector of QString's 
inline QVector<QString> modelToStrings( const OperationTrade &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_trade_id_Set() || !v.is_trade_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTradeId() ) );

    //------------------------------
    if ( !v.is_date_Set() || !v.is_date_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getDate() ) );

    //------------------------------
    if ( !v.is_price_Set() || !v.is_price_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getPrice() ) );

    //------------------------------
    if ( !v.is_quantity_Set() || !v.is_quantity_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getQuantity() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts Order to QVector of QString's 
inline QVector<QString> modelToStrings( const Order &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_order_id_Set() || !v.is_order_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOrderId() ) );

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_operation_Set() || !v.is_operation_Valid() ) // type: OperationType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOperation() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: OrderStatus
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_requested_lots_Set() || !v.is_requested_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRequestedLots() ) );

    //------------------------------
    if ( !v.is_executed_lots_Set() || !v.is_executed_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExecutedLots() ) );

    //------------------------------
    if ( !v.is_type_Set() || !v.is_type_Valid() ) // type: OrderType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getType() ) );

    //------------------------------
    if ( !v.is_price_Set() || !v.is_price_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getPrice() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts PlacedLimitOrder to QVector of QString's 
inline QVector<QString> modelToStrings( const PlacedLimitOrder &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_order_id_Set() || !v.is_order_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOrderId() ) );

    //------------------------------
    if ( !v.is_operation_Set() || !v.is_operation_Valid() ) // type: OperationType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOperation() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: OrderStatus
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_reject_reason_Set() || !v.is_reject_reason_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRejectReason() ) );

    //------------------------------
    if ( !v.is_message_Set() || !v.is_message_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMessage() ) );

    //------------------------------
    if ( !v.is_requested_lots_Set() || !v.is_requested_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRequestedLots() ) );

    //------------------------------
    if ( !v.is_executed_lots_Set() || !v.is_executed_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExecutedLots() ) );

    //------------------------------
    if ( !v.is_commission_Set() || !v.is_commission_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCommission() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts PlacedMarketOrder to QVector of QString's 
inline QVector<QString> modelToStrings( const PlacedMarketOrder &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_order_id_Set() || !v.is_order_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOrderId() ) );

    //------------------------------
    if ( !v.is_operation_Set() || !v.is_operation_Valid() ) // type: OperationType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOperation() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: OrderStatus
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_reject_reason_Set() || !v.is_reject_reason_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRejectReason() ) );

    //------------------------------
    if ( !v.is_message_Set() || !v.is_message_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMessage() ) );

    //------------------------------
    if ( !v.is_requested_lots_Set() || !v.is_requested_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRequestedLots() ) );

    //------------------------------
    if ( !v.is_executed_lots_Set() || !v.is_executed_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExecutedLots() ) );

    //------------------------------
    if ( !v.is_commission_Set() || !v.is_commission_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCommission() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts SandboxAccount to QVector of QString's 
inline QVector<QString> modelToStrings( const SandboxAccount &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_broker_account_type_Set() || !v.is_broker_account_type_Valid() ) // type: BrokerAccountType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountType() ) );

    //------------------------------
    if ( !v.is_broker_account_id_Set() || !v.is_broker_account_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountId() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts SearchMarketInstrument to QVector of QString's 
inline QVector<QString> modelToStrings( const SearchMarketInstrument &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_ticker_Set() || !v.is_ticker_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTicker() ) );

    //------------------------------
    if ( !v.is_isin_Set() || !v.is_isin_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getIsin() ) );

    //------------------------------
    if ( !v.is_min_price_increment_Set() || !v.is_min_price_increment_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMinPriceIncrement() ) );

    //------------------------------
    if ( !v.is_lot_Set() || !v.is_lot_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getLot() ) );

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_name_Set() || !v.is_name_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getName() ) );

    //------------------------------
    if ( !v.is_type_Set() || !v.is_type_Valid() ) // type: InstrumentType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getType() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts MarketInstrument to QVector of QString's 
inline QVector<QString> modelToStrings( const MarketInstrument &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_ticker_Set() || !v.is_ticker_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTicker() ) );

    //------------------------------
    if ( !v.is_isin_Set() || !v.is_isin_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getIsin() ) );

    //------------------------------
    if ( !v.is_min_price_increment_Set() || !v.is_min_price_increment_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMinPriceIncrement() ) );

    //------------------------------
    if ( !v.is_lot_Set() || !v.is_lot_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getLot() ) );

    //------------------------------
    if ( !v.is_min_quantity_Set() || !v.is_min_quantity_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMinQuantity() ) );

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_name_Set() || !v.is_name_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getName() ) );

    //------------------------------
    if ( !v.is_type_Set() || !v.is_type_Valid() ) // type: InstrumentType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getType() ) );

    //------------------------------
    return resVec;
}

#endif /* INVEST_OPENAPI_GENERATED_MODEL_TO_STRINGS_IMPLEMENTED */

//----------------------------------------------------------------------------






//----------------------------------------------------------------------------
//! Creates SQL schema format for 'Empty' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Empty >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TRACKING_ID"                      , "VARCHAR(255)"                     ); // Spec lookup order: ::string, TRACKING_ID, ::Empty::string, ::EMPTY::string, ::Empty::TRACKING_ID, ::EMPTY::TRACKING_ID
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "PAYLOAD"                          , ""                                 ); // Spec lookup order: ::object, PAYLOAD, ::Empty::object, ::EMPTY::object, ::Empty::PAYLOAD, ::EMPTY::PAYLOAD
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "STATUS"                           , "VARCHAR(255)"                     ); // Spec lookup order: ::string, STATUS, ::Empty::string, ::EMPTY::string, ::Empty::STATUS, ::EMPTY::STATUS

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'Error' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Error >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TRACKING_ID"                      , "VARCHAR(255)"                     ); // Spec lookup order: ::string, TRACKING_ID, ::Error::string, ::ERROR::string, ::Error::TRACKING_ID, ::ERROR::TRACKING_ID
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "STATUS"                           , "VARCHAR(255)"                     ); // Spec lookup order: ::string, STATUS, ::Error::string, ::ERROR::string, ::Error::STATUS, ::ERROR::STATUS
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "PAYLOAD"                          , ""                                 ); // Spec lookup order: ::object, PAYLOAD, ::Error::object, ::ERROR::object, ::Error::PAYLOAD, ::ERROR::PAYLOAD

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'UserAccount' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< UserAccount >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<BrokerAccountType>( p + "BROKER_ACCOUNT_TYPE", true ) ); // brokerAccountType
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "BROKER_ACCOUNT_ID"                , "VARCHAR(255)"                     ); // Spec lookup order: ::string, BROKER_ACCOUNT_ID, ::UserAccount::string, ::USER_ACCOUNT::string, ::UserAccount::BROKER_ACCOUNT_ID, ::USER_ACCOUNT::BROKER_ACCOUNT_ID

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'CurrencyPosition' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< CurrencyPosition >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<Currency>( p + "CURRENCY", true ) ); // currency
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "BALANCE"                          , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, BALANCE, ::CurrencyPosition::number, ::CURRENCY_POSITION::number, ::CurrencyPosition::number::double, ::CURRENCY_POSITION::number::double, ::CurrencyPosition::BALANCE, ::CURRENCY_POSITION::BALANCE
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "BLOCKED"                          , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, BLOCKED, ::CurrencyPosition::number, ::CURRENCY_POSITION::number, ::CurrencyPosition::number::double, ::CURRENCY_POSITION::number::double, ::CurrencyPosition::BLOCKED, ::CURRENCY_POSITION::BLOCKED

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'PortfolioPosition' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< PortfolioPosition >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "FIGI"                             , "VARCHAR(12)"                      ); // Spec lookup order: ::string, FIGI, ::PortfolioPosition::string, ::PORTFOLIO_POSITION::string, ::PortfolioPosition::FIGI, ::PORTFOLIO_POSITION::FIGI
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TICKER"                           , "VARCHAR(12)"                      ); // Spec lookup order: ::string, TICKER, ::PortfolioPosition::string, ::PORTFOLIO_POSITION::string, ::PortfolioPosition::TICKER, ::PORTFOLIO_POSITION::TICKER
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ISIN"                             , "VARCHAR(12)"                      ); // Spec lookup order: ::string, ISIN, ::PortfolioPosition::string, ::PORTFOLIO_POSITION::string, ::PortfolioPosition::ISIN, ::PORTFOLIO_POSITION::ISIN
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<InstrumentType>( p + "INSTRUMENT_TYPE", true ) ); // instrumentType
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "BALANCE"                          , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, BALANCE, ::PortfolioPosition::number, ::PORTFOLIO_POSITION::number, ::PortfolioPosition::number::double, ::PORTFOLIO_POSITION::number::double, ::PortfolioPosition::BALANCE, ::PORTFOLIO_POSITION::BALANCE
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "BLOCKED"                          , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, BLOCKED, ::PortfolioPosition::number, ::PORTFOLIO_POSITION::number, ::PortfolioPosition::number::double, ::PORTFOLIO_POSITION::number::double, ::PortfolioPosition::BLOCKED, ::PORTFOLIO_POSITION::BLOCKED
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<MoneyAmount>( p + "EXPECTED_YIELD_MONEY_AMOUNT", true ) ); // expectedYield
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "LOTS"                             , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, LOTS, ::PortfolioPosition::integer, ::PORTFOLIO_POSITION::integer, ::PortfolioPosition::integer::int32, ::PORTFOLIO_POSITION::integer::int32, ::PortfolioPosition::LOTS, ::PORTFOLIO_POSITION::LOTS
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<MoneyAmount>( p + "AVERAGE_POSITION_PRICE_MONEY_AMOUNT", true ) ); // averagePositionPrice
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<MoneyAmount>( p + "AVERAGE_POSITION_PRICE_NO_NKD_MONEY_AMOUNT", true ) ); // averagePositionPriceNoNkd
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "NAME"                             , "VARCHAR(255)"                     ); // Spec lookup order: ::string, NAME, ::PortfolioPosition::string, ::PORTFOLIO_POSITION::string, ::PortfolioPosition::NAME, ::PORTFOLIO_POSITION::NAME

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'MoneyAmount' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< MoneyAmount >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<Currency>( p + "CURRENCY", true ) ); // currency
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "VALUE"                            , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, VALUE, ::MoneyAmount::number, ::MONEY_AMOUNT::number, ::MoneyAmount::number::double, ::MONEY_AMOUNT::number::double, ::MoneyAmount::VALUE, ::MONEY_AMOUNT::VALUE

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'Candle' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Candle >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "FIGI"                             , "VARCHAR(12)"                      ); // Spec lookup order: ::string, FIGI, ::Candle::string, ::CANDLE::string, ::Candle::FIGI, ::CANDLE::FIGI
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<CandleResolution>( p + "INTERVAL_CANDLE_RESOLUTION", true ) ); // interval
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "O"                                , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, O, ::Candle::number, ::CANDLE::number, ::Candle::number::double, ::CANDLE::number::double, ::Candle::O, ::CANDLE::O
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "C"                                , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, C, ::Candle::number, ::CANDLE::number, ::Candle::number::double, ::CANDLE::number::double, ::Candle::C, ::CANDLE::C
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "H"                                , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, H, ::Candle::number, ::CANDLE::number, ::Candle::number::double, ::CANDLE::number::double, ::Candle::H, ::CANDLE::H
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "L"                                , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, L, ::Candle::number, ::CANDLE::number, ::Candle::number::double, ::CANDLE::number::double, ::Candle::L, ::CANDLE::L
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "V"                                , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, V, ::Candle::integer, ::CANDLE::integer, ::Candle::integer::int32, ::CANDLE::integer::int32, ::Candle::V, ::CANDLE::V
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TIME"                             , "VARCHAR(255)"                     ); // Spec lookup order: ::string, ::string::date-time, TIME, ::Candle::string, ::CANDLE::string, ::Candle::string::date-time, ::CANDLE::string::date-time, ::Candle::TIME, ::CANDLE::TIME

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'OperationTrade' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< OperationTrade >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TRADE_ID"                         , "VARCHAR(255)"                     ); // Spec lookup order: ::string, TRADE_ID, ::OperationTrade::string, ::OPERATION_TRADE::string, ::OperationTrade::TRADE_ID, ::OPERATION_TRADE::TRADE_ID
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "DATE"                             , "VARCHAR(255)"                     ); // Spec lookup order: ::string, ::string::date-time, DATE, ::OperationTrade::string, ::OPERATION_TRADE::string, ::OperationTrade::string::date-time, ::OPERATION_TRADE::string::date-time, ::OperationTrade::DATE, ::OPERATION_TRADE::DATE
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "PRICE"                            , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, PRICE, ::OperationTrade::number, ::OPERATION_TRADE::number, ::OperationTrade::number::double, ::OPERATION_TRADE::number::double, ::OperationTrade::PRICE, ::OPERATION_TRADE::PRICE
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "QUANTITY"                         , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, QUANTITY, ::OperationTrade::integer, ::OPERATION_TRADE::integer, ::OperationTrade::integer::int32, ::OPERATION_TRADE::integer::int32, ::OperationTrade::QUANTITY, ::OPERATION_TRADE::QUANTITY

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'Order' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< Order >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ORDER_ID"                         , "VARCHAR(32) NOT NULL UNIQUE"      ); // Spec lookup order: ::string, ORDER_ID, ::Order::string, ::ORDER::string, ::Order::ORDER_ID, ::ORDER::ORDER_ID
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "FIGI"                             , "VARCHAR(12)"                      ); // Spec lookup order: ::string, FIGI, ::Order::string, ::ORDER::string, ::Order::FIGI, ::ORDER::FIGI
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OperationType>( p + "OPERATION_TYPE", true ) ); // operation
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OrderStatus>( p + "ORDER_STATUS", true ) ); // status
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "REQUESTED_LOTS"                   , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, REQUESTED_LOTS, ::Order::integer, ::ORDER::integer, ::Order::integer::int32, ::ORDER::integer::int32, ::Order::REQUESTED_LOTS, ::ORDER::REQUESTED_LOTS
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "EXECUTED_LOTS"                    , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, EXECUTED_LOTS, ::Order::integer, ::ORDER::integer, ::Order::integer::int32, ::ORDER::integer::int32, ::Order::EXECUTED_LOTS, ::ORDER::EXECUTED_LOTS
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OrderType>( p + "ORDER_TYPE", true ) ); // type
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "PRICE"                            , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, PRICE, ::Order::number, ::ORDER::number, ::Order::number::double, ::ORDER::number::double, ::Order::PRICE, ::ORDER::PRICE

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'PlacedLimitOrder' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< PlacedLimitOrder >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ORDER_ID"                         , "VARCHAR(255)"                     ); // Spec lookup order: ::string, ORDER_ID, ::PlacedLimitOrder::string, ::PLACED_LIMIT_ORDER::string, ::PlacedLimitOrder::ORDER_ID, ::PLACED_LIMIT_ORDER::ORDER_ID
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OperationType>( p + "OPERATION_TYPE", true ) ); // operation
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OrderStatus>( p + "ORDER_STATUS", true ) ); // status
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "REJECT_REASON"                    , "VARCHAR(255)"                     ); // Spec lookup order: ::string, REJECT_REASON, ::PlacedLimitOrder::string, ::PLACED_LIMIT_ORDER::string, ::PlacedLimitOrder::REJECT_REASON, ::PLACED_LIMIT_ORDER::REJECT_REASON
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "MESSAGE"                          , "VARCHAR(255)"                     ); // Spec lookup order: ::string, MESSAGE, ::PlacedLimitOrder::string, ::PLACED_LIMIT_ORDER::string, ::PlacedLimitOrder::MESSAGE, ::PLACED_LIMIT_ORDER::MESSAGE
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "REQUESTED_LOTS"                   , "INTEGER"                          ); // Spec lookup order: ::integer, REQUESTED_LOTS, ::PlacedLimitOrder::integer, ::PLACED_LIMIT_ORDER::integer, ::PlacedLimitOrder::REQUESTED_LOTS, ::PLACED_LIMIT_ORDER::REQUESTED_LOTS
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "EXECUTED_LOTS"                    , "INTEGER"                          ); // Spec lookup order: ::integer, EXECUTED_LOTS, ::PlacedLimitOrder::integer, ::PLACED_LIMIT_ORDER::integer, ::PlacedLimitOrder::EXECUTED_LOTS, ::PLACED_LIMIT_ORDER::EXECUTED_LOTS
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<MoneyAmount>( p + "COMMISSION_MONEY_AMOUNT", true ) ); // commission

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'PlacedMarketOrder' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< PlacedMarketOrder >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ORDER_ID"                         , "VARCHAR(255)"                     ); // Spec lookup order: ::string, ORDER_ID, ::PlacedMarketOrder::string, ::PLACED_MARKET_ORDER::string, ::PlacedMarketOrder::ORDER_ID, ::PLACED_MARKET_ORDER::ORDER_ID
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OperationType>( p + "OPERATION_TYPE", true ) ); // operation
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<OrderStatus>( p + "ORDER_STATUS", true ) ); // status
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "REJECT_REASON"                    , "VARCHAR(255)"                     ); // Spec lookup order: ::string, REJECT_REASON, ::PlacedMarketOrder::string, ::PLACED_MARKET_ORDER::string, ::PlacedMarketOrder::REJECT_REASON, ::PLACED_MARKET_ORDER::REJECT_REASON
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "MESSAGE"                          , "VARCHAR(255)"                     ); // Spec lookup order: ::string, MESSAGE, ::PlacedMarketOrder::string, ::PLACED_MARKET_ORDER::string, ::PlacedMarketOrder::MESSAGE, ::PLACED_MARKET_ORDER::MESSAGE
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "REQUESTED_LOTS"                   , "INTEGER"                          ); // Spec lookup order: ::integer, REQUESTED_LOTS, ::PlacedMarketOrder::integer, ::PLACED_MARKET_ORDER::integer, ::PlacedMarketOrder::REQUESTED_LOTS, ::PLACED_MARKET_ORDER::REQUESTED_LOTS
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "EXECUTED_LOTS"                    , "INTEGER"                          ); // Spec lookup order: ::integer, EXECUTED_LOTS, ::PlacedMarketOrder::integer, ::PLACED_MARKET_ORDER::integer, ::PlacedMarketOrder::EXECUTED_LOTS, ::PLACED_MARKET_ORDER::EXECUTED_LOTS
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<MoneyAmount>( p + "COMMISSION_MONEY_AMOUNT", true ) ); // commission

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'SandboxAccount' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< SandboxAccount >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<BrokerAccountType>( p + "BROKER_ACCOUNT_TYPE", true ) ); // brokerAccountType
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "BROKER_ACCOUNT_ID"                , "VARCHAR(255)"                     ); // Spec lookup order: ::string, BROKER_ACCOUNT_ID, ::SandboxAccount::string, ::SANDBOX_ACCOUNT::string, ::SandboxAccount::BROKER_ACCOUNT_ID, ::SANDBOX_ACCOUNT::BROKER_ACCOUNT_ID

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'SearchMarketInstrument' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< SearchMarketInstrument >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "FIGI"                             , "VARCHAR(12)"                      ); // Spec lookup order: ::string, FIGI, ::SearchMarketInstrument::string, ::SEARCH_MARKET_INSTRUMENT::string, ::SearchMarketInstrument::FIGI, ::SEARCH_MARKET_INSTRUMENT::FIGI
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TICKER"                           , "VARCHAR(12)"                      ); // Spec lookup order: ::string, TICKER, ::SearchMarketInstrument::string, ::SEARCH_MARKET_INSTRUMENT::string, ::SearchMarketInstrument::TICKER, ::SEARCH_MARKET_INSTRUMENT::TICKER
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ISIN"                             , "VARCHAR(12)"                      ); // Spec lookup order: ::string, ISIN, ::SearchMarketInstrument::string, ::SEARCH_MARKET_INSTRUMENT::string, ::SearchMarketInstrument::ISIN, ::SEARCH_MARKET_INSTRUMENT::ISIN
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "MIN_PRICE_INCREMENT"              , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, MIN_PRICE_INCREMENT, ::SearchMarketInstrument::number, ::SEARCH_MARKET_INSTRUMENT::number, ::SearchMarketInstrument::number::double, ::SEARCH_MARKET_INSTRUMENT::number::double, ::SearchMarketInstrument::MIN_PRICE_INCREMENT, ::SEARCH_MARKET_INSTRUMENT::MIN_PRICE_INCREMENT
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "LOT"                              , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, LOT, ::SearchMarketInstrument::integer, ::SEARCH_MARKET_INSTRUMENT::integer, ::SearchMarketInstrument::integer::int32, ::SEARCH_MARKET_INSTRUMENT::integer::int32, ::SearchMarketInstrument::LOT, ::SEARCH_MARKET_INSTRUMENT::LOT
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<Currency>( p + "CURRENCY", true ) ); // currency
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "NAME"                             , "VARCHAR(255)"                     ); // Spec lookup order: ::string, NAME, ::SearchMarketInstrument::string, ::SEARCH_MARKET_INSTRUMENT::string, ::SearchMarketInstrument::NAME, ::SEARCH_MARKET_INSTRUMENT::NAME
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<InstrumentType>( p + "INSTRUMENT_TYPE", true ) ); // type

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}

//----------------------------------------------------------------------------
//! Creates SQL schema format for 'MarketInstrument' model 
template <> inline QVector<QString> modelMakeSqlSchemaStringVector_SQLITE< MarketInstrument >( const QString &nameOrPrefix, bool forInlining )
{
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_PROLOG();

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_INLINING_BEGIN() /* if (forInlining) */
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ID"                               , "INTEGER REFERENCES MARKET_INSTRUMENT" ); // ID spec inline
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_INLINING_ELSE()
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ID"                               , "INTEGER PRIMARY KEY AUTOINCREMENT" ); // ID spec schema
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_INLINING_END()
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "FIGI"                             , "VARCHAR(12) NOT NULL UNIQUE"      ); // Spec lookup order: ::string, FIGI, ::MarketInstrument::string, ::MARKET_INSTRUMENT::string, ::MarketInstrument::FIGI, ::MARKET_INSTRUMENT::FIGI
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "TICKER"                           , "VARCHAR(12) NOT NULL UNIQUE"      ); // Spec lookup order: ::string, TICKER, ::MarketInstrument::string, ::MARKET_INSTRUMENT::string, ::MarketInstrument::TICKER, ::MARKET_INSTRUMENT::TICKER
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "ISIN"                             , "VARCHAR(12) UNIQUE"               ); // Spec lookup order: ::string, ISIN, ::MarketInstrument::string, ::MARKET_INSTRUMENT::string, ::MarketInstrument::ISIN, ::MARKET_INSTRUMENT::ISIN
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "MIN_PRICE_INCREMENT"              , "DECIMAL(18,8)"                    ); // Spec lookup order: ::number, ::number::double, MIN_PRICE_INCREMENT, ::MarketInstrument::number, ::MARKET_INSTRUMENT::number, ::MarketInstrument::number::double, ::MARKET_INSTRUMENT::number::double, ::MarketInstrument::MIN_PRICE_INCREMENT, ::MARKET_INSTRUMENT::MIN_PRICE_INCREMENT
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "LOT"                              , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, LOT, ::MarketInstrument::integer, ::MARKET_INSTRUMENT::integer, ::MarketInstrument::integer::int32, ::MARKET_INSTRUMENT::integer::int32, ::MarketInstrument::LOT, ::MARKET_INSTRUMENT::LOT
    appendToStringVector( resVec, p + "LOT_MARKET                         INTEGER"                            ); // Spec ::schema::MarketInstrument::after::lot
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "MIN_QUANTITY"                     , "INTEGER"                          ); // Spec lookup order: ::integer, ::integer::int32, MIN_QUANTITY, ::MarketInstrument::integer, ::MARKET_INSTRUMENT::integer, ::MarketInstrument::integer::int32, ::MARKET_INSTRUMENT::integer::int32, ::MarketInstrument::MIN_QUANTITY, ::MARKET_INSTRUMENT::MIN_QUANTITY
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<Currency>( p + "CURRENCY", true ) ); // currency
    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_RES_APPEND2( "NAME"                             , "VARCHAR(255)"                     ); // Spec lookup order: ::string, NAME, ::MarketInstrument::string, ::MARKET_INSTRUMENT::string, ::MarketInstrument::NAME, ::MARKET_INSTRUMENT::NAME
    appendToStringVector( resVec, modelMakeSqlSchemaStringVector_SQLITE<InstrumentType>( p + "INSTRUMENT_TYPE", true ) ); // type

    INVEST_OPEAPI_MODEL_TO_STRINGS_MODEL_MAKE_SQL_SCHEMA_STRING_VECTOR_EPILOG();
}


inline QMap<QString,QString> modelMakeAllSqlShemas_SQLITE()
{
    QMap<QString,QString> resMap;

    resMap[ "EMPTY"                    ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< Empty                  >( QString(), false ) ); 
    resMap[ "ERROR"                    ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< Error                  >( QString(), false ) ); 
    resMap[ "USER_ACCOUNT"             ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< UserAccount            >( QString(), false ) ); 
    resMap[ "CURRENCY_POSITION"        ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< CurrencyPosition       >( QString(), false ) ); 
    resMap[ "PORTFOLIO_POSITION"       ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< PortfolioPosition      >( QString(), false ) ); 
    resMap[ "MONEY_AMOUNT"             ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< MoneyAmount            >( QString(), false ) ); 
    resMap[ "CANDLE"                   ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< Candle                 >( QString(), false ) ); 
    resMap[ "OPERATION_TRADE"          ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< OperationTrade         >( QString(), false ) ); 
    resMap[ "ORDER"                    ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< Order                  >( QString(), false ) ); 
    resMap[ "PLACED_LIMIT_ORDER"       ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< PlacedLimitOrder       >( QString(), false ) ); 
    resMap[ "PLACED_MARKET_ORDER"      ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< PlacedMarketOrder      >( QString(), false ) ); 
    resMap[ "SANDBOX_ACCOUNT"          ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< SandboxAccount         >( QString(), false ) ); 
    resMap[ "SEARCH_MARKET_INSTRUMENT" ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< SearchMarketInstrument >( QString(), false ) ); 
    resMap[ "MARKET_INSTRUMENT"        ]  = modelMakeSqlCreateTableSchema_SQLITE( modelMakeSqlSchemaStringVector_SQLITE< MarketInstrument       >( QString(), false ) ); 

    return resMap;
}




inline QSet<QString> modelMakeAllSqlTablesSet_SQLITE()
{
    QSet<QString> resSet;

    resSet.insert( "EMPTY"                    );
    resSet.insert( "ERROR"                    );
    resSet.insert( "USER_ACCOUNT"             );
    resSet.insert( "CURRENCY_POSITION"        );
    resSet.insert( "PORTFOLIO_POSITION"       );
    resSet.insert( "MONEY_AMOUNT"             );
    resSet.insert( "CANDLE"                   );
    resSet.insert( "OPERATION_TRADE"          );
    resSet.insert( "ORDER"                    );
    resSet.insert( "PLACED_LIMIT_ORDER"       );
    resSet.insert( "PLACED_MARKET_ORDER"      );
    resSet.insert( "SANDBOX_ACCOUNT"          );
    resSet.insert( "SEARCH_MARKET_INSTRUMENT" );
    resSet.insert( "MARKET_INSTRUMENT"        );

    return resSet;
}


} // namespace invest_openapi


