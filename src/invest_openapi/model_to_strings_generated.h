/*! \file
    \brief Autogenerated file
 */

#pragma once

#include <QVector>
#include <QString>

#include "models.h"
#include "models_helpers.h"
#include "utility.h"

namespace invest_openapi
{

using namespace OpenAPI;


//----------------------------------------------------------------------------
template <typename ModelType> QString modelMakeSqlSchemaStringVector( );

//----------------------------------------------------------------------------
QVector<QString> modelToStrings ( const UserAccount &v );
QVector<QString> modelToStrings ( const CurrencyPosition &v );
QVector<QString> modelToStrings ( const PortfolioPosition &v );
QVector<QString> modelToStrings ( const MoneyAmount &v );
QVector<QString> modelToStrings ( const Candle &v );
QVector<QString> modelToStrings ( const OperationTrade &v );
QVector<QString> modelToStrings ( const Order &v );
QVector<QString> modelToStrings ( const PlacedLimitOrder &v );
QVector<QString> modelToStrings ( const PlacedMarketOrder &v );
QVector<QString> modelToStrings ( const SandboxAccount &v );
QVector<QString> modelToStrings ( const SearchMarketInstrument &v );
QVector<QString> modelToStrings ( const MarketInstrument &v );
//----------------------------------------------------------------------------




//----------------------------------------------------------------------------
//! Converts UserAccount to QVector of QString's 
inline QVector<QString> modelToStrings( const UserAccount &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_broker_account_type_Set() || !v.is_broker_account_type_Valid() ) // type: BrokerAccountType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountType() ) );

    //------------------------------
    if ( !v.is_broker_account_id_Set() || !v.is_broker_account_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountId() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts CurrencyPosition to QVector of QString's 
inline QVector<QString> modelToStrings( const CurrencyPosition &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_balance_Set() || !v.is_balance_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBalance() ) );

    //------------------------------
    if ( !v.is_blocked_Set() || !v.is_blocked_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBlocked() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts PortfolioPosition to QVector of QString's 
inline QVector<QString> modelToStrings( const PortfolioPosition &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_ticker_Set() || !v.is_ticker_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTicker() ) );

    //------------------------------
    if ( !v.is_isin_Set() || !v.is_isin_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getIsin() ) );

    //------------------------------
    if ( !v.is_instrument_type_Set() || !v.is_instrument_type_Valid() ) // type: InstrumentType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getInstrumentType() ) );

    //------------------------------
    if ( !v.is_balance_Set() || !v.is_balance_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBalance() ) );

    //------------------------------
    if ( !v.is_blocked_Set() || !v.is_blocked_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBlocked() ) );

    //------------------------------
    if ( !v.is_expected_yield_Set() || !v.is_expected_yield_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExpectedYield() ) );

    //------------------------------
    if ( !v.is_lots_Set() || !v.is_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getLots() ) );

    //------------------------------
    if ( !v.is_average_position_price_Set() || !v.is_average_position_price_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getAveragePositionPrice() ) );

    //------------------------------
    if ( !v.is_average_position_price_no_nkd_Set() || !v.is_average_position_price_no_nkd_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getAveragePositionPriceNoNkd() ) );

    //------------------------------
    if ( !v.is_name_Set() || !v.is_name_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getName() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts MoneyAmount to QVector of QString's 
inline QVector<QString> modelToStrings( const MoneyAmount &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_value_Set() || !v.is_value_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getValue() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts Candle to QVector of QString's 
inline QVector<QString> modelToStrings( const Candle &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_interval_Set() || !v.is_interval_Valid() ) // type: CandleResolution
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getInterval() ) );

    //------------------------------
    if ( !v.is_o_Set() || !v.is_o_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getO() ) );

    //------------------------------
    if ( !v.is_c_Set() || !v.is_c_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getC() ) );

    //------------------------------
    if ( !v.is_h_Set() || !v.is_h_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getH() ) );

    //------------------------------
    if ( !v.is_l_Set() || !v.is_l_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getL() ) );

    //------------------------------
    if ( !v.is_v_Set() || !v.is_v_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getV() ) );

    //------------------------------
    if ( !v.is_time_Set() || !v.is_time_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTime() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts OperationTrade to QVector of QString's 
inline QVector<QString> modelToStrings( const OperationTrade &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_trade_id_Set() || !v.is_trade_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTradeId() ) );

    //------------------------------
    if ( !v.is_date_Set() || !v.is_date_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getDate() ) );

    //------------------------------
    if ( !v.is_price_Set() || !v.is_price_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getPrice() ) );

    //------------------------------
    if ( !v.is_quantity_Set() || !v.is_quantity_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getQuantity() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts Order to QVector of QString's 
inline QVector<QString> modelToStrings( const Order &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_order_id_Set() || !v.is_order_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOrderId() ) );

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_operation_Set() || !v.is_operation_Valid() ) // type: OperationType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOperation() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: OrderStatus
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_requested_lots_Set() || !v.is_requested_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRequestedLots() ) );

    //------------------------------
    if ( !v.is_executed_lots_Set() || !v.is_executed_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExecutedLots() ) );

    //------------------------------
    if ( !v.is_type_Set() || !v.is_type_Valid() ) // type: OrderType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getType() ) );

    //------------------------------
    if ( !v.is_price_Set() || !v.is_price_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getPrice() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts PlacedLimitOrder to QVector of QString's 
inline QVector<QString> modelToStrings( const PlacedLimitOrder &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_order_id_Set() || !v.is_order_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOrderId() ) );

    //------------------------------
    if ( !v.is_operation_Set() || !v.is_operation_Valid() ) // type: OperationType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOperation() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: OrderStatus
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_reject_reason_Set() || !v.is_reject_reason_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRejectReason() ) );

    //------------------------------
    if ( !v.is_message_Set() || !v.is_message_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMessage() ) );

    //------------------------------
    if ( !v.is_requested_lots_Set() || !v.is_requested_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRequestedLots() ) );

    //------------------------------
    if ( !v.is_executed_lots_Set() || !v.is_executed_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExecutedLots() ) );

    //------------------------------
    if ( !v.is_commission_Set() || !v.is_commission_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCommission() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts PlacedMarketOrder to QVector of QString's 
inline QVector<QString> modelToStrings( const PlacedMarketOrder &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_order_id_Set() || !v.is_order_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOrderId() ) );

    //------------------------------
    if ( !v.is_operation_Set() || !v.is_operation_Valid() ) // type: OperationType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getOperation() ) );

    //------------------------------
    if ( !v.is_status_Set() || !v.is_status_Valid() ) // type: OrderStatus
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getStatus() ) );

    //------------------------------
    if ( !v.is_reject_reason_Set() || !v.is_reject_reason_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRejectReason() ) );

    //------------------------------
    if ( !v.is_message_Set() || !v.is_message_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMessage() ) );

    //------------------------------
    if ( !v.is_requested_lots_Set() || !v.is_requested_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getRequestedLots() ) );

    //------------------------------
    if ( !v.is_executed_lots_Set() || !v.is_executed_lots_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getExecutedLots() ) );

    //------------------------------
    if ( !v.is_commission_Set() || !v.is_commission_Valid() ) // type: MoneyAmount
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCommission() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts SandboxAccount to QVector of QString's 
inline QVector<QString> modelToStrings( const SandboxAccount &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_broker_account_type_Set() || !v.is_broker_account_type_Valid() ) // type: BrokerAccountType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountType() ) );

    //------------------------------
    if ( !v.is_broker_account_id_Set() || !v.is_broker_account_id_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getBrokerAccountId() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts SearchMarketInstrument to QVector of QString's 
inline QVector<QString> modelToStrings( const SearchMarketInstrument &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_ticker_Set() || !v.is_ticker_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTicker() ) );

    //------------------------------
    if ( !v.is_isin_Set() || !v.is_isin_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getIsin() ) );

    //------------------------------
    if ( !v.is_min_price_increment_Set() || !v.is_min_price_increment_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMinPriceIncrement() ) );

    //------------------------------
    if ( !v.is_lot_Set() || !v.is_lot_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getLot() ) );

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_name_Set() || !v.is_name_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getName() ) );

    //------------------------------
    if ( !v.is_type_Set() || !v.is_type_Valid() ) // type: InstrumentType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getType() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------
//! Converts MarketInstrument to QVector of QString's 
inline QVector<QString> modelToStrings( const MarketInstrument &v )
{
    QVector<QString> resVec;

    //------------------------------
    if ( !v.is_figi_Set() || !v.is_figi_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getFigi() ) );

    //------------------------------
    if ( !v.is_ticker_Set() || !v.is_ticker_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getTicker() ) );

    //------------------------------
    if ( !v.is_isin_Set() || !v.is_isin_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getIsin() ) );

    //------------------------------
    if ( !v.is_min_price_increment_Set() || !v.is_min_price_increment_Valid() ) // type: number
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMinPriceIncrement() ) );

    //------------------------------
    if ( !v.is_lot_Set() || !v.is_lot_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getLot() ) );

    //------------------------------
    if ( !v.is_min_quantity_Set() || !v.is_min_quantity_Valid() ) // type: integer
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getMinQuantity() ) );

    //------------------------------
    if ( !v.is_currency_Set() || !v.is_currency_Valid() ) // type: Currency
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getCurrency() ) );

    //------------------------------
    if ( !v.is_name_Set() || !v.is_name_Valid() ) // type: string
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getName() ) );

    //------------------------------
    if ( !v.is_type_Set() || !v.is_type_Valid() ) // type: InstrumentType
        appendToStringVector(resVec, QString());
    else
        appendToStringVector(resVec, modelToStrings( v.getType() ) );

    //------------------------------
    return resVec;
}

//----------------------------------------------------------------------------






//----------------------------------------------------------------------------
//! Creates SQL schema format UserAccount model 
template <> QString modelMakeSqlSchema< UserAccount >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "BROKER_ACCOUNT_TYPE      " );// ::BrokerAccountType, BROKER_ACCOUNT_TYPE, UserAccount::BrokerAccountType
    appendToStringVector( schemaVec, "BROKER_ACCOUNT_ID        VARCHAR(255)" );// ::string, BROKER_ACCOUNT_ID, UserAccount::string
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format CurrencyPosition model 
template <> QString modelMakeSqlSchema< CurrencyPosition >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "CURRENCY                 " );// ::Currency, CURRENCY, CurrencyPosition::Currency
    appendToStringVector( schemaVec, "BALANCE                  DECIMAL(18,8)" );// ::number::double, ::number, BALANCE, CurrencyPosition::number
    appendToStringVector( schemaVec, "BLOCKED                  DECIMAL(18,8)" );// ::number::double, ::number, BLOCKED, CurrencyPosition::number
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format PortfolioPosition model 
template <> QString modelMakeSqlSchema< PortfolioPosition >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "FIGI                     VARCHAR(255) " );// ::string, FIGI, PortfolioPosition::string
    appendToStringVector( schemaVec, "TICKER                   VARCHAR(255) " );// ::string, TICKER, PortfolioPosition::string
    appendToStringVector( schemaVec, "ISIN                     VARCHAR(255) " );// ::string, ISIN, PortfolioPosition::string
    appendToStringVector( schemaVec, "INSTRUMENT_TYPE          " );// ::InstrumentType, INSTRUMENT_TYPE, PortfolioPosition::InstrumentType
    appendToStringVector( schemaVec, "BALANCE                  DECIMAL(18,8)" );// ::number::double, ::number, BALANCE, PortfolioPosition::number
    appendToStringVector( schemaVec, "BLOCKED                  DECIMAL(18,8)" );// ::number::double, ::number, BLOCKED, PortfolioPosition::number
    appendToStringVector( schemaVec, "EXPECTED_YIELD           " );// ::MoneyAmount, EXPECTED_YIELD, PortfolioPosition::MoneyAmount
    appendToStringVector( schemaVec, "LOTS                     INTEGER" );// ::integer::int32, ::integer, LOTS, PortfolioPosition::integer
    appendToStringVector( schemaVec, "AVERAGE_POSITION_PRICE   " );// ::MoneyAmount, AVERAGE_POSITION_PRICE, PortfolioPosition::MoneyAmount
    appendToStringVector( schemaVec, "AVERAGE_POSITION_PRICE_NO_NKD " );// ::MoneyAmount, AVERAGE_POSITION_PRICE_NO_NKD, PortfolioPosition::MoneyAmount
    appendToStringVector( schemaVec, "NAME                     VARCHAR(255)" );// ::string, NAME, PortfolioPosition::string
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format MoneyAmount model 
template <> QString modelMakeSqlSchema< MoneyAmount >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "CURRENCY                 " );// ::Currency, CURRENCY, MoneyAmount::Currency
    appendToStringVector( schemaVec, "VALUE                    DECIMAL(18,8)" );// ::number::double, ::number, VALUE, MoneyAmount::number
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format Candle model 
template <> QString modelMakeSqlSchema< Candle >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "FIGI                     VARCHAR(255) " );// ::string, FIGI, Candle::string
    appendToStringVector( schemaVec, "INTERVAL                 " );// ::CandleResolution, INTERVAL, Candle::CandleResolution
    appendToStringVector( schemaVec, "O                        DECIMAL(18,8)" );// ::number::double, ::number, O, Candle::number
    appendToStringVector( schemaVec, "C                        DECIMAL(18,8)" );// ::number::double, ::number, C, Candle::number
    appendToStringVector( schemaVec, "H                        DECIMAL(18,8)" );// ::number::double, ::number, H, Candle::number
    appendToStringVector( schemaVec, "L                        DECIMAL(18,8)" );// ::number::double, ::number, L, Candle::number
    appendToStringVector( schemaVec, "V                        INTEGER" );// ::integer::int32, ::integer, V, Candle::integer
    appendToStringVector( schemaVec, "TIME                     VARCHAR(255)" );// ::string::date-time, ::string, TIME, Candle::string
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format OperationTrade model 
template <> QString modelMakeSqlSchema< OperationTrade >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "TRADE_ID                 VARCHAR(255)" );// ::string, TRADE_ID, OperationTrade::string
    appendToStringVector( schemaVec, "DATE                     VARCHAR(255)" );// ::string::date-time, ::string, DATE, OperationTrade::string
    appendToStringVector( schemaVec, "PRICE                    DECIMAL(18,8)" );// ::number::double, ::number, PRICE, OperationTrade::number
    appendToStringVector( schemaVec, "QUANTITY                 INTEGER" );// ::integer::int32, ::integer, QUANTITY, OperationTrade::integer
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format Order model 
template <> QString modelMakeSqlSchema< Order >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "ORDER_ID                 VARCHAR(255)" );// ::string, ORDER_ID, Order::string
    appendToStringVector( schemaVec, "FIGI                     VARCHAR(255) " );// ::string, FIGI, Order::string
    appendToStringVector( schemaVec, "OPERATION                " );// ::OperationType, OPERATION, Order::OperationType
    appendToStringVector( schemaVec, "STATUS                   " );// ::OrderStatus, STATUS, Order::OrderStatus
    appendToStringVector( schemaVec, "REQUESTED_LOTS           INTEGER" );// ::integer::int32, ::integer, REQUESTED_LOTS, Order::integer
    appendToStringVector( schemaVec, "EXECUTED_LOTS            INTEGER" );// ::integer::int32, ::integer, EXECUTED_LOTS, Order::integer
    appendToStringVector( schemaVec, "TYPE                     " );// ::OrderType, TYPE, Order::OrderType
    appendToStringVector( schemaVec, "PRICE                    DECIMAL(18,8)" );// ::number::double, ::number, PRICE, Order::number
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format PlacedLimitOrder model 
template <> QString modelMakeSqlSchema< PlacedLimitOrder >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "ORDER_ID                 VARCHAR(255)" );// ::string, ORDER_ID, PlacedLimitOrder::string
    appendToStringVector( schemaVec, "OPERATION                " );// ::OperationType, OPERATION, PlacedLimitOrder::OperationType
    appendToStringVector( schemaVec, "STATUS                   " );// ::OrderStatus, STATUS, PlacedLimitOrder::OrderStatus
    appendToStringVector( schemaVec, "REJECT_REASON            VARCHAR(255)" );// ::string, REJECT_REASON, PlacedLimitOrder::string
    appendToStringVector( schemaVec, "MESSAGE                  VARCHAR(255)" );// ::string, MESSAGE, PlacedLimitOrder::string
    appendToStringVector( schemaVec, "REQUESTED_LOTS           " );// ::integer, REQUESTED_LOTS, PlacedLimitOrder::integer
    appendToStringVector( schemaVec, "EXECUTED_LOTS            " );// ::integer, EXECUTED_LOTS, PlacedLimitOrder::integer
    appendToStringVector( schemaVec, "COMMISSION               " );// ::MoneyAmount, COMMISSION, PlacedLimitOrder::MoneyAmount
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format PlacedMarketOrder model 
template <> QString modelMakeSqlSchema< PlacedMarketOrder >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "ORDER_ID                 VARCHAR(255)" );// ::string, ORDER_ID, PlacedMarketOrder::string
    appendToStringVector( schemaVec, "OPERATION                " );// ::OperationType, OPERATION, PlacedMarketOrder::OperationType
    appendToStringVector( schemaVec, "STATUS                   " );// ::OrderStatus, STATUS, PlacedMarketOrder::OrderStatus
    appendToStringVector( schemaVec, "REJECT_REASON            VARCHAR(255)" );// ::string, REJECT_REASON, PlacedMarketOrder::string
    appendToStringVector( schemaVec, "MESSAGE                  VARCHAR(255)" );// ::string, MESSAGE, PlacedMarketOrder::string
    appendToStringVector( schemaVec, "REQUESTED_LOTS           " );// ::integer, REQUESTED_LOTS, PlacedMarketOrder::integer
    appendToStringVector( schemaVec, "EXECUTED_LOTS            " );// ::integer, EXECUTED_LOTS, PlacedMarketOrder::integer
    appendToStringVector( schemaVec, "COMMISSION               " );// ::MoneyAmount, COMMISSION, PlacedMarketOrder::MoneyAmount
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format SandboxAccount model 
template <> QString modelMakeSqlSchema< SandboxAccount >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "BROKER_ACCOUNT_TYPE      " );// ::BrokerAccountType, BROKER_ACCOUNT_TYPE, SandboxAccount::BrokerAccountType
    appendToStringVector( schemaVec, "BROKER_ACCOUNT_ID        VARCHAR(255)" );// ::string, BROKER_ACCOUNT_ID, SandboxAccount::string
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format SearchMarketInstrument model 
template <> QString modelMakeSqlSchema< SearchMarketInstrument >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "FIGI                     VARCHAR(255) " );// ::string, FIGI, SearchMarketInstrument::string
    appendToStringVector( schemaVec, "TICKER                   VARCHAR(255) " );// ::string, TICKER, SearchMarketInstrument::string
    appendToStringVector( schemaVec, "ISIN                     VARCHAR(255) " );// ::string, ISIN, SearchMarketInstrument::string
    appendToStringVector( schemaVec, "MIN_PRICE_INCREMENT      DECIMAL(18,8)" );// ::number::double, ::number, MIN_PRICE_INCREMENT, SearchMarketInstrument::number
    appendToStringVector( schemaVec, "LOT                      INTEGER" );// ::integer::int32, ::integer, LOT, SearchMarketInstrument::integer
    appendToStringVector( schemaVec, "CURRENCY                 " );// ::Currency, CURRENCY, SearchMarketInstrument::Currency
    appendToStringVector( schemaVec, "NAME                     VARCHAR(255)" );// ::string, NAME, SearchMarketInstrument::string
    appendToStringVector( schemaVec, "TYPE                     " );// ::InstrumentType, TYPE, SearchMarketInstrument::InstrumentType
    return schemaVec;
}

//----------------------------------------------------------------------------
//! Creates SQL schema format MarketInstrument model 
template <> QString modelMakeSqlSchema< MarketInstrument >( )
{
    QVector<QString> schemaVec;
    appendToStringVector( schemaVec, "FIGI                     VARCHAR(255) " );// ::string, FIGI, MarketInstrument::string
    appendToStringVector( schemaVec, "TICKER                   VARCHAR(255) " );// ::string, TICKER, MarketInstrument::string
    appendToStringVector( schemaVec, "ISIN                     VARCHAR(255) " );// ::string, ISIN, MarketInstrument::string
    appendToStringVector( schemaVec, "MIN_PRICE_INCREMENT      DECIMAL(18,8)" );// ::number::double, ::number, MIN_PRICE_INCREMENT, MarketInstrument::number
    appendToStringVector( schemaVec, "LOT                      INTEGER" );// ::integer::int32, ::integer, LOT, MarketInstrument::integer
    appendToStringVector( schemaVec, "MIN_QUANTITY             INTEGER" );// ::integer::int32, ::integer, MIN_QUANTITY, MarketInstrument::integer
    appendToStringVector( schemaVec, "CURRENCY                 " );// ::Currency, CURRENCY, MarketInstrument::Currency
    appendToStringVector( schemaVec, "NAME                     VARCHAR(255)" );// ::string, NAME, MarketInstrument::string
    appendToStringVector( schemaVec, "TYPE                     " );// ::InstrumentType, TYPE, MarketInstrument::InstrumentType
    return schemaVec;
}
} // namespace invest_openapi


